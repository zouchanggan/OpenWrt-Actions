name: 🔧 Build Toolchain

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        description: 'OpenWrt Version'
        required: true
        default: 'openwrt-24.10'
        type: choice
        options:
          - openwrt-24.10      # 最新稳定版
          - openwrt-23.05
          - openwrt-22.03
          - master
      target:
        description: 'Target Platform (e.g., x86/64, ramips/mt7621)'
        required: true
        default: 'x86/64'
        type: string
      force_rebuild:
        description: 'Force rebuild even if toolchain exists'
        required: false
        default: false
        type: boolean
  
  schedule:
    - cron: '0 2 * * 0'  # 每周日 02:00 UTC
  
  repository_dispatch:
    types: [toolchain-rebuild]

env:
  OPENWRT_VERSION: ${{ github.event.inputs.openwrt_version || 'openwrt-24.10' }}
  TARGET_PLATFORM: ${{ github.event.inputs.target || 'x86/64' }}
  TZ: Asia/Shanghai

jobs:
  check-existing:
    name: 🔍 Check Existing Toolchain
    runs-on: ubuntu-24.04
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      toolchain_hash: ${{ steps.check.outputs.toolchain_hash }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Check Existing Toolchain
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 🔥 修复：使用与 build-openwrt-4.yml 一致的哈希算法
          TOOLCHAIN_HASH=$(echo "${{ env.OPENWRT_VERSION }}-${{ env.TARGET_PLATFORM }}-$(uname -m)" | md5sum | cut -d' ' -f1 | cut -c1-40)
          
          echo "toolchain_hash=$TOOLCHAIN_HASH" >> $GITHUB_OUTPUT
          
          echo "════════════════════════════════════════════════════════════════"
          echo "🔍 Checking for Existing Toolchain"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          echo "📋 Toolchain Information:"
          echo "  Version: ${{ env.OPENWRT_VERSION }}"
          echo "  Target: ${{ env.TARGET_PLATFORM }}"
          echo "  Host Arch: $(uname -m)"
          echo "  Hash: $TOOLCHAIN_HASH"
          echo ""
          
          # 检查是否存在
          RELEASE_TAG="toolchain-${TOOLCHAIN_HASH}"
          
          if gh release view "$RELEASE_TAG" --repo "${{ github.repository }}" >/dev/null 2>&1; then
            if [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
              echo "🔄 Force rebuild requested"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "✅ Toolchain already exists: $RELEASE_TAG"
              echo ""
              echo "📦 Existing files:"
              gh release view "$RELEASE_TAG" --repo "${{ github.repository }}" --json assets --jq '.assets[].name'
              echo ""
              echo "⏭️  Skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "🆕 Toolchain not found, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"

  build-toolchain:
    name: 🔨 Build Toolchain
    needs: check-existing
    if: needs.check-existing.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    
    steps:
      # ============================================
      # 1. 检出代码
      # ============================================
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # ============================================
      # 2. 初始化环境（Ubuntu 24.04 优化）
      # ============================================
      - name: 🔧 Initialize Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          
          # 版本和构建信息
          VERSION=$(date +'%Y.%m.%d')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          JOBS=$(nproc)
          
          # 🔥 创建安全的文件名（移除特殊字符）
          TARGET_SAFE=$(echo "${{ env.TARGET_PLATFORM }}" | sed 's/[\/:]/-/g')
          
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')"
            echo "BUILD_ID=$BUILD_ID"
            echo "COMPILE_JOBS=$JOBS"
            echo "FILE_DATE=$(date +'%Y.%m.%d-%H%M')"
            echo "TARGET_SAFE=$TARGET_SAFE"
          } >> $GITHUB_ENV
          
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "📊 System Information"
          echo "════════════════════════════════════════════════════════════════"
          echo "🖥️  OS: $(lsb_release -d | cut -f2)"
          echo "🔧 Kernel: $(uname -r)"
          echo "💻 CPU: $(nproc) cores ($(lscpu | grep 'Model name' | cut -d':' -f2 | xargs))"
          echo "💾 Memory: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "💿 Disk: $(df -h /workdir | awk 'NR==2 {print $4}') available"
          echo ""
          echo "📋 Build Configuration:"
          echo "  Version: $VERSION"
          echo "  Build ID: $BUILD_ID"
          echo "  Jobs: $JOBS"
          echo "════════════════════════════════════════════════════════════════"
          echo ""

      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
        
      # ============================================
      # 3. 克隆 OpenWrt 源码
      # ============================================
      - name: 📦 Clone OpenWrt Source
        working-directory: /workdir
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "📦 Cloning OpenWrt ${{ env.OPENWRT_VERSION }}"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          for attempt in 1 2 3; do
            echo "📥 Clone attempt $attempt/3..."
            if git clone --depth 1 --branch ${{ env.OPENWRT_VERSION }} \
              https://github.com/openwrt/openwrt.git openwrt; then
              break
            fi
            echo "❌ Clone attempt $attempt failed"
            rm -rf openwrt
            if [ $attempt -lt 3 ]; then
              sleep 10
            else
              echo "❌ All clone attempts failed"
              exit 1
            fi
          done
          
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
          cd openwrt
          
          # 获取提交信息
          COMMIT_HASH=$(git log -1 --format=%H)
          COMMIT_DATE=$(git log -1 --format=%ci)
          COMMIT_AUTHOR=$(git log -1 --format=%an)
          COMMIT_MESSAGE=$(git log -1 --format=%s)
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "📋 OpenWrt Information"
          echo "════════════════════════════════════════════════════════════════"
          echo "Version: ${{ env.OPENWRT_VERSION }}"
          echo "Commit: ${COMMIT_HASH::7}"
          echo "Date: $COMMIT_DATE"
          echo "Author: $COMMIT_AUTHOR"
          echo "Message: $COMMIT_MESSAGE"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          {
            echo "COMMIT_HASH=$COMMIT_HASH"
            echo "COMMIT_DATE=$COMMIT_DATE"
            echo "COMMIT_AUTHOR=$COMMIT_AUTHOR"
            echo "COMMIT_MESSAGE=$COMMIT_MESSAGE"
          } >> $GITHUB_ENV

      # ============================================
      # 4. 更新 Feeds
      # ============================================
      - name: 🔄 Update Feeds
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "🔄 Updating Feeds"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 显示 feeds 配置
          echo "📋 Feeds configuration:"
          cat feeds.conf.default
          echo ""
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          echo ""
          echo "✅ Feeds updated successfully"

      # ============================================
      # 5. 生成工具链配置
      # ============================================
      - name: ⚙️ Generate Toolchain Config
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "⚙️ Generating Toolchain Configuration"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 解析目标平台
          TARGET=$(echo ${{ env.TARGET_PLATFORM }} | cut -d'/' -f1)
          SUBTARGET=$(echo ${{ env.TARGET_PLATFORM }} | cut -d'/' -f2)
          
          # 转换为大写（用于配置）
          TARGET_UPPER=$(echo $TARGET | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          SUBTARGET_UPPER=$(echo $SUBTARGET | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          
          echo "📋 Target Configuration:"
          echo "  Target: $TARGET ($TARGET_UPPER)"
          echo "  Subtarget: $SUBTARGET ($SUBTARGET_UPPER)"
          echo ""
          
          # 生成最小配置（OpenWrt 24.10 优化）
          cat > .config <<EOF
          CONFIG_TARGET_${TARGET}=y
          CONFIG_TARGET_${TARGET}_${SUBTARGET}=y
          
          # 工具链选项
          CONFIG_DEVEL=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_CCACHE=y
          
          # 使用 LLVM/Clang（24.10 新特性）
          CONFIG_USE_LLVM_BUILD=y
          CONFIG_USE_LLVM_HOST=y
          
          # 优化选项
          CONFIG_TARGET_OPTIONS=y
          CONFIG_TARGET_OPTIMIZATION="-O2 -pipe -march=native"
          
          # 禁用不必要的包
          # CONFIG_ALL_KMODS is not set
          # CONFIG_ALL_NONSHARED is not set
          EOF
          
          # 展开配置
          make defconfig
          
          echo ""
          echo "📋 Generated configuration:"
          grep "^CONFIG_TARGET" .config | head -10
          echo ""
          echo "✅ Configuration generated"

      # ============================================
      # 6. 下载依赖
      # ============================================
      - name: 📥 Download Dependencies
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "📥 Downloading Dependencies"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          make download -j$(nproc) V=s
          
          # 检查下载失败的文件
          echo ""
          echo "🔍 Checking for failed downloads..."
          FAILED_COUNT=$(find dl -size 0 2>/dev/null | wc -l)
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "⚠️  Found $FAILED_COUNT failed downloads:"
            find dl -size 0 -exec ls -l {} \;
          else
            echo "✅ All downloads successful"
          fi
          
          echo ""
          echo "📊 Download statistics:"
          echo "  Total files: $(find dl -type f | wc -l)"
          echo "  Total size: $(du -sh dl | cut -f1)"
          echo ""
          echo "✅ Dependencies downloaded"

      # ============================================
      # 7. 编译工具链
      # ============================================
      - name: 🔨 Build Toolchain
        id: build_toolchain
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "🔨 Building Toolchain"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          echo "⏰ Start time: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "🖥️  CPU cores: $(nproc)"
          echo ""
          
          START_TIME=$(date +%s)
          
          # 编译工具链
          echo "────────────────────────────────────────────────────────────────"
          echo "🔧 Phase 1: Building tools..."
          echo "────────────────────────────────────────────────────────────────"
          if ! make -j$(nproc) tools/install V=s; then
            echo "❌ Tools build failed"
            exit 1
          fi
          
          echo ""
          echo "────────────────────────────────────────────────────────────────"
          echo "🔨 Phase 2: Building toolchain..."
          echo "────────────────────────────────────────────────────────────────"
          if ! make -j$(nproc) toolchain/install V=s; then
            echo "❌ Toolchain build failed"
            exit 1
          fi
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "✅ Toolchain Build Complete"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          echo "⏱️  Duration: $((DURATION/3600))h $((DURATION%3600/60))m $((DURATION%60))s"
          echo "🕐 End time: $(date '+%Y-%m-%d %H:%M:%S')"
          
          # ccache 统计
          echo ""
          echo "────────────────────────────────────────────────────────────────"
          echo "📊 ccache Statistics"
          echo "────────────────────────────────────────────────────────────────"
          ccache -s 2>/dev/null || echo "ccache not available"

      # ============================================
      # 8. 🔥 验证工具链（新增）
      # ============================================
      - name: 🧪 Validate Toolchain
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "🧪 Validating Toolchain"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 查找工具链目录
          TOOLCHAIN_DIR=$(find staging_dir -maxdepth 1 -type d -name "toolchain-*" | head -1)
          
          if [ -z "$TOOLCHAIN_DIR" ]; then
            echo "❌ Toolchain directory not found!"
            echo "Available directories:"
            ls -la staging_dir/
            exit 1
          fi
          
          echo "📂 Toolchain directory: $(basename "$TOOLCHAIN_DIR")"
          echo "TOOLCHAIN_NAME=$(basename "$TOOLCHAIN_DIR")" >> $GITHUB_ENV
          echo ""
          
          # 检查 GCC
          GCC_BIN=$(find "$TOOLCHAIN_DIR/bin" -name "*-gcc" -type f | head -1)
          
          if [ -z "$GCC_BIN" ] || [ ! -f "$GCC_BIN" ]; then
            echo "❌ GCC not found in $TOOLCHAIN_DIR/bin"
            echo "Available files:"
            ls -la "$TOOLCHAIN_DIR/bin/" | head -20
            exit 1
          fi
          
          echo "📦 Found GCC: $(basename "$GCC_BIN")"
          echo ""
          
          # 修复权限
          chmod +x "$GCC_BIN"
          
          # 测试编译器
          echo "🧪 Testing compiler..."
          if ! "$GCC_BIN" --version; then
            echo "❌ GCC test failed"
            exit 1
          fi
          
          GCC_VERSION=$("$GCC_BIN" --version | head -1)
          echo "GCC_VERSION=$GCC_VERSION" >> $GITHUB_ENV
          
          echo ""
          
          # 检查必需工具
          echo "🔍 Checking required tools..."
          REQUIRED_TOOLS=(
            "*-g++"
            "*-ld"
            "*-ar"
            "*-as"
            "*-ranlib"
            "*-strip"
            "*-objcopy"
            "*-objdump"
          )
          
          MISSING_TOOLS=0
          for pattern in "${REQUIRED_TOOLS[@]}"; do
            TOOL=$(find "$TOOLCHAIN_DIR/bin" -name "$pattern" -type f | head -1)
            if [ -z "$TOOL" ]; then
              echo "❌ Missing tool: $pattern"
              MISSING_TOOLS=$((MISSING_TOOLS + 1))
            else
              chmod +x "$TOOL" 2>/dev/null || true
              echo "✅ Found: $(basename "$TOOL")"
            fi
          done
          
          if [ $MISSING_TOOLS -gt 0 ]; then
            echo ""
            echo "❌ Toolchain incomplete: $MISSING_TOOLS missing tools"
            exit 1
          fi
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "✅ Toolchain Validation Passed"
          echo "════════════════════════════════════════════════════════════════"

      # ============================================
      # 9. 生成工具链信息
      # ============================================
      - name: 📋 Generate Toolchain Info
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "📋 Generating Toolchain Information"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 获取编译器版本
          TOOLCHAIN_PATH=$(find staging_dir -type d -name "toolchain-*" | head -1)
          
          if [ -d "$TOOLCHAIN_PATH" ]; then
            GCC_BIN=$(find "$TOOLCHAIN_PATH/bin" -name "*-gcc" -type f | head -1)
            LD_BIN=$(find "$TOOLCHAIN_PATH/bin" -name "*-ld" -type f | head -1)
            
            if [ -n "$GCC_BIN" ]; then
              GCC_VERSION=$("$GCC_BIN" --version 2>/dev/null | head -1 || echo "N/A")
            else
              GCC_VERSION="N/A"
            fi
            
            if [ -n "$LD_BIN" ]; then
              BINUTILS_VERSION=$("$LD_BIN" --version 2>/dev/null | head -1 || echo "N/A")
            else
              BINUTILS_VERSION="N/A"
            fi
            
            CLANG_VERSION=$(clang --version 2>/dev/null | head -1 || echo "N/A")
          else
            GCC_VERSION="N/A"
            BINUTILS_VERSION="N/A"
            CLANG_VERSION="N/A"
          fi
          
          # 生成信息文件
          cat > toolchain-info.txt <<EOF
          ════════════════════════════════════════════════════════════════
          Toolchain Information
          ════════════════════════════════════════════════════════════════
          
          OpenWrt Version: ${{ env.OPENWRT_VERSION }}
          Target Platform: ${{ env.TARGET_PLATFORM }}
          Build Date: ${{ env.BUILD_DATE }}
          Build Host: Ubuntu 24.04 LTS
          Build Kernel: $(uname -r)
          Toolchain Hash: ${{ needs.check-existing.outputs.toolchain_hash }}
          Toolchain Name: ${{ env.TOOLCHAIN_NAME }}
          
          ────────────────────────────────────────────────────────────────
          Compiler Information
          ────────────────────────────────────────────────────────────────
          
          GCC Version:
          $GCC_VERSION
          
          Binutils Version:
          $BINUTILS_VERSION
          
          Clang Version:
          $CLANG_VERSION
          
          ────────────────────────────────────────────────────────────────
          Source Information
          ────────────────────────────────────────────────────────────────
          
          Commit: ${{ env.COMMIT_HASH }}
          Author: ${{ env.COMMIT_AUTHOR }}
          Date: ${{ env.COMMIT_DATE }}
          Message: ${{ env.COMMIT_MESSAGE }}
          
          ────────────────────────────────────────────────────────────────
          Directory Sizes
          ────────────────────────────────────────────────────────────────
          
          Staging Directory: $(du -sh staging_dir 2>/dev/null | cut -f1)
          Build Directory: $(du -sh build_dir 2>/dev/null | cut -f1)
          
          ────────────────────────────────────────────────────────────────
          Build Features (OpenWrt 24.10)
          ────────────────────────────────────────────────────────────────
          
          ✅ LLVM/Clang Support
          ✅ ccache Enabled
          ✅ Optimized Build Flags
          ✅ Multi-threaded Compilation
          
          ════════════════════════════════════════════════════════════════
          EOF
          
          cat toolchain-info.txt
          echo ""
          echo "✅ Toolchain information generated"

      # ============================================
      # 10. 🔥 打包工具链（完全修复版）
      # ============================================
      - name: 📦 Package Toolchain
        working-directory: /workdir/openwrt
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "📦 Packaging Toolchain"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 🔥 关键：使用与 build-openwrt-4.yml 一致的文件名
          TOOLCHAIN_HASH="${{ needs.check-existing.outputs.toolchain_hash }}"
          PACKAGE_NAME="toolchain-${TOOLCHAIN_HASH}.tar.gz"
          
          echo "📋 Package Information:"
          echo "  Hash: $TOOLCHAIN_HASH"
          echo "  Name: $PACKAGE_NAME"
          echo ""
          
          # 🔥 关键：打包时保持正确的目录结构（不包含顶层目录）
          echo "🗜️  Creating archive with correct structure..."
          echo "  This may take several minutes..."
          echo ""
          
          # 使用 pigz 进行多线程压缩（如果可用）
          if command -v pigz &> /dev/null; then
            echo "✅ Using pigz for faster compression"
            tar -I "pigz -9" -cf "/workdir/$PACKAGE_NAME" \
              staging_dir/ \
              build_dir/toolchain-* \
              toolchain-info.txt
          else
            echo "✅ Using gzip for compression"
            tar -czf "/workdir/$PACKAGE_NAME" \
              staging_dir/ \
              build_dir/toolchain-* \
              toolchain-info.txt
          fi
          
          cd /workdir
          
          # 🔥 关键：验证压缩包结构
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "🔍 Verifying Archive Structure"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          echo "First 20 entries in archive:"
          tar -tzf "$PACKAGE_NAME" 2>/dev/null | head -20
          echo ""
          
          # 检查关键目录
          VALIDATION_PASSED=true
          
          if tar -tzf "$PACKAGE_NAME" | grep -q "^staging_dir/toolchain-"; then
            echo "✅ Found staging_dir/toolchain-*"
          else
            echo "❌ ERROR: staging_dir/toolchain-* not found!"
            VALIDATION_PASSED=false
          fi
          
          if tar -tzf "$PACKAGE_NAME" | grep -q "^build_dir/toolchain-"; then
            echo "✅ Found build_dir/toolchain-*"
          else
            echo "⚠️  WARNING: build_dir/toolchain-* not found (optional)"
          fi
          
          if tar -tzf "$PACKAGE_NAME" | grep -q "^toolchain-info.txt"; then
            echo "✅ Found toolchain-info.txt"
          else
            echo "⚠️  WARNING: toolchain-info.txt not found"
          fi
          
          if [ "$VALIDATION_PASSED" = false ]; then
            echo ""
            echo "❌ Archive structure validation failed!"
            echo "Full archive contents:"
            tar -tzf "$PACKAGE_NAME" | head -50
            exit 1
          fi
          
          echo ""
          echo "✅ Archive structure validated"
          
          # 计算校验和
          echo ""
          echo "🔐 Calculating checksums..."
          SHA256=$(sha256sum "$PACKAGE_NAME" | awk '{print $1}')
          MD5=$(md5sum "$PACKAGE_NAME" | awk '{print $1}')
          
          # 显示信息
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "📊 Package Information"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          ls -lh "$PACKAGE_NAME"
          echo ""
          echo "📦 Package name: $PACKAGE_NAME"
          echo "📁 Package size: $(du -sh "$PACKAGE_NAME" | cut -f1)"
          echo "🔐 SHA256: $SHA256"
          echo "🔐 MD5: $MD5"
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          
          # 保存信息到环境变量
          {
            echo "PACKAGE_NAME=$PACKAGE_NAME"
            echo "SHA256=$SHA256"
            echo "MD5=$MD5"
          } >> $GITHUB_ENV

      # ============================================
      # 11. 上传 Artifact
      # ============================================
      - name: 📦 Upload Toolchain Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: toolchain-${{ env.OPENWRT_VERSION }}-${{ env.TARGET_SAFE }}
          path: /workdir/${{ env.PACKAGE_NAME }}
          retention-days: 7
          compression-level: 0

      # ============================================
      # 12. 创建 Release
      # ============================================
      - name: 🚀 Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: toolchain-${{ needs.check-existing.outputs.toolchain_hash }}
          name: 🔧 Toolchain - ${{ env.OPENWRT_VERSION }} (${{ env.TARGET_SAFE }})
          files: /workdir/${{ env.PACKAGE_NAME }}
          body: |
            ## 🔧 预编译工具链
            
            ### 📋 基本信息
            | 项目 | 信息 |
            |------|------|
            | **OpenWrt 版本** | `${{ env.OPENWRT_VERSION }}` ⭐ |
            | **目标平台** | `${{ env.TARGET_PLATFORM }}` |
            | **构建环境** | Ubuntu 24.04 LTS |
            | **构建时间** | `${{ env.BUILD_DATE }}` |
            | **工具链哈希** | `${{ needs.check-existing.outputs.toolchain_hash }}` |
            | **工具链名称** | `${{ env.TOOLCHAIN_NAME }}` |
            
            ### 🔧 编译器信息
            | 组件 | 版本 |
            |------|------|
            | **GCC** | `${{ env.GCC_VERSION }}` |
            | **Clang** | ✅ 已启用 (OpenWrt 24.10) |
            | **ccache** | ✅ 已启用 |
            
            ### 📦 文件信息
            - **文件名**: `${{ env.PACKAGE_NAME }}`
            - **大小**: 约 1-2 GB（压缩后）
            - **SHA256**: `${{ env.SHA256 }}`
            - **MD5**: `${{ env.MD5 }}`
            
            ### ✨ 新特性 (OpenWrt 24.10)
            - ✅ **LLVM/Clang 编译器支持**
            - ✅ **优化的构建标志**
            - ✅ **改进的 ccache 集成**
            - ✅ **更快的编译速度**
            - ✅ **完整的工具链验证**
            
            ### 📝 源码信息
            - **仓库**: https://github.com/openwrt/openwrt
            - **分支**: `${{ env.OPENWRT_VERSION }}`
            - **提交**: `${{ env.COMMIT_HASH }}`
            - **作者**: ${{ env.COMMIT_AUTHOR }}
            - **时间**: ${{ env.COMMIT_DATE }}
            - **消息**: ${{ env.COMMIT_MESSAGE }}
            
            ### 🚀 使用方法
            
            #### 方法 1：在 build-openwrt-4.yml 中自动使用
            ```yaml
            - name: 📥 Download Prebuilt Toolchain
              env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                TOOLCHAIN_HASH="${{ needs.check-existing.outputs.toolchain_hash }}"
                gh release download "toolchain-$TOOLCHAIN_HASH" \
                  --repo "${{ github.repository }}" \
                  --pattern "toolchain-*.tar.gz" \
                  --dir /tmp/toolchain
