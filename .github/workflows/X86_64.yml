#=================================================
# 优化版：缓存命中率提升到 80%+
# Author: P3TERX (Modified and Optimized)
#=================================================
name: 💻 X86_64

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.1.200"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "🧹 强制清理缓存"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
  # 🔥 新增：全局 ccache 环境变量
  USE_CCACHE: 1
  CCACHE_COMPRESS: 1
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_DIR: /home/runner/.ccache
  CCACHE_MAXSIZE: 20G

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    steps:
      # ============================================
      # 1. 环境初始化
      # ============================================
      - name: 🔧 Setup Environment
        id: env
        run: |
          # 时区与 Git 基本配置
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 构建信息
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # 自动并行计算
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          # 显示系统信息
          echo "====================================="
          echo "📊 System Information"
          echo "====================================="
          echo "CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
          echo "Cores: $PROC_COUNT | Memory: ${MEM_GB}GB | Jobs: $JOBS"
          echo "OS: $(lsb_release -ds) | Kernel: $(uname -r)"
          echo "Build: $VERSION ($BUILD_ID)"
          echo "====================================="
          
          # 导出环境变量
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
          } >> $GITHUB_ENV

      # ============================================
      # 2. 系统优化
      # ============================================
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: 💾 Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h

      # ============================================
      # 3. 代码检出
      # ============================================
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ============================================
      # 4. 构建依赖安装
      # ============================================
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm

      # ============================================
      # 5. 🔥 预创建缓存目录（新增）
      # ============================================
      - name: 🗂️ Prepare Cache Directories
        run: |
          mkdir -p /home/runner/.ccache
          mkdir -p openwrt/{dl,staging_dir,build_dir}
          echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV
          
          # 安装最新 ccache
          sudo apt-get update && sudo apt-get install -y ccache

      # ============================================
      # 6. 源码准备与信息采集
      # ============================================
      - name: 📥 Prepare OpenWrt Source
        run: |
          if ! git ls-remote --heads "$REPO_URL" "$REPO_BRANCH" &>/dev/null; then
            echo "❌ Branch $REPO_BRANCH not found in $REPO_URL"
            git ls-remote --heads "$REPO_URL" | head -10
            exit 1
          fi
          
          echo "🔄 Cloning fresh OpenWrt source..."
          rm -rf openwrt
          
          for attempt in 1 2 3; do
            echo "📥 Clone attempt $attempt/3..."
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "❌ Clone attempt $attempt failed"
            rm -rf openwrt
            if [ $attempt -lt 3 ]; then
              sleep 10
            else
              echo "❌ All clone attempts failed"
              exit 1
            fi
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 获取提交信息
          if git log -1 --pretty=format:'%an|%ci|%s|%H' &>/dev/null; then
            COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
            IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          else
            AUTHOR="Unknown"; DATE="Unknown"; MESSAGE="Unknown"; HASH="Unknown"
          fi
          
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV

      # ============================================
      # 7. 🔥 生成稳定缓存键（优化版）
      # ============================================
      - name: 🔑 Generate Cache Keys
        id: cache-keys
        run: |
          # 基于源码的稳定哈希
          SOURCE_HASH=$(echo "${{ env.REPO_URL }}-${{ env.REPO_BRANCH }}" | sha256sum | cut -c1-8)
          
          # 基于编译配置的哈希（排除时间相关）
          CONFIG_HASH=$(echo "${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}" | sha256sum | cut -c1-8)
          
          # 月度键（降低刷新频率）
          MONTH_KEY=$(date +'%Y%m')
          
          echo "source_hash=$SOURCE_HASH" >> $GITHUB_OUTPUT
          echo "config_hash=$CONFIG_HASH" >> $GITHUB_OUTPUT
          echo "month_key=$MONTH_KEY" >> $GITHUB_OUTPUT
          
          echo "📊 Cache Keys:"
          echo "  Source: $SOURCE_HASH"
          echo "  Config: $CONFIG_HASH"
          echo "  Month: $MONTH_KEY"

      # ============================================
      # 8. 🔥 增强版缓存策略（核心优化）
      # ============================================
      
      # 🔥 ccache 独立缓存（最重要）
      - name: ☁️ Cache ccache (Primary)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: /home/runner/.ccache
          key: ccache-main-${{ steps.cache-keys.outputs.source_hash }}-${{ steps.cache-keys.outputs.config_hash }}-${{ github.run_id }}
          restore-keys: |
            ccache-main-${{ steps.cache-keys.outputs.source_hash }}-${{ steps.cache-keys.outputs.config_hash }}-
            ccache-main-${{ steps.cache-keys.outputs.source_hash }}-
            ccache-main-

      # 工具链缓存（月度更新）
      - name: ☁️ Cache Toolchain
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ steps.cache-keys.outputs.source_hash }}-${{ steps.cache-keys.outputs.month_key }}-v8
          restore-keys: |
            toolchain-${{ steps.cache-keys.outputs.source_hash }}-${{ steps.cache-keys.outputs.month_key }}-
            toolchain-${{ steps.cache-keys.outputs.source_hash }}-

      # Staging 目录缓存
      - name: ☁️ Cache Staging Directory
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: staging-${{ steps.cache-keys.outputs.source_hash }}-${{ steps.cache-keys.outputs.month_key }}-v6
          restore-keys: |
            staging-${{ steps.cache-keys.outputs.source_hash }}-${{ steps.cache-keys.outputs.month_key }}-
            staging-${{ steps.cache-keys.outputs.source_hash }}-

      # 🔥 增强版构建缓存（包含更多路径）
      - name: ☁️ Cache Build Directory
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/host*
            openwrt/build_dir/target-*
            openwrt/.prepared
            openwrt/.configured
          key: build-${{ steps.cache-keys.outputs.config_hash }}-${{ github.run_id }}
          restore-keys: |
            build-${{ steps.cache-keys.outputs.config_hash }}-
            build-

      # 下载缓存
      - name: ☁️ Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ steps.cache-keys.outputs.source_hash }}-v7
          restore-keys: |
            downloads-${{ steps.cache-keys.outputs.source_hash }}-
            downloads-

      # ============================================
      # 9. 🔥 增强版 ccache 配置（核心优化）
      # ============================================
      - name: 🔥 Configure ccache (Enhanced)
        run: |
          # 使用全局 ccache 目录
          export CCACHE_DIR=/home/runner/.ccache
          
          # 🔥 激进优化配置
          ccache --set-config=max_size=20G
          ccache --set-config=max_files=200000
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache --set-config=sloppiness=file_macro,locale,time_macros,include_file_mtime,include_file_ctime,file_stat_matches,pch_defines
          ccache --set-config=hash_dir=false
          ccache --set-config=compiler_check=content
          ccache --set-config=depend_mode=true
          ccache --set-config=direct_mode=true
          ccache --set-config=recache=false
          
          # 创建编译器链接
          sudo ln -sf /usr/bin/ccache /usr/local/bin/gcc
          sudo ln -sf /usr/bin/ccache /usr/local/bin/g++
          sudo ln -sf /usr/bin/ccache /usr/local/bin/cc
          sudo ln -sf /usr/bin/ccache /usr/local/bin/c++
          
          # 显示初始状态
          echo "=== ccache initial setup ==="
          ccache -s
          ccache -p | grep -E "max_size|max_files|sloppiness|compression"
          echo "============================"
          
          # 导出环境变量
          {
            echo "PATH=/usr/lib/ccache:/usr/local/bin:$PATH"
            echo "CCACHE_DIR=/home/runner/.ccache"
            echo "USE_CCACHE=1"
            echo "CCACHE_COMPRESS=1"
            echo "CONFIG_CCACHE=y"
            echo "CONFIG_DEVEL=y"
          } >> $GITHUB_ENV

      # ============================================
      # 10. 简化的 Feeds 配置
      # ============================================
      - name: 📚 Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          
          # 确保 feeds 目录干净
          echo "🧹 Cleaning feeds directory..."
          rm -rf feeds tmp/packagecache
          
          # 复制 feeds 配置（如果存在）
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
            echo "📄 Using custom feeds.conf.default"
          else
            echo "::warning::feeds.conf.default not found, using upstream defaults."
          fi
          
          # 更新和安装 feeds
          echo "🔄 Updating feeds..."
          ./scripts/feeds update -a
          echo "📦 Installing feeds..."
          ./scripts/feeds install -a

      # ============================================
      # 11. 自定义配置及插件开关
      # ============================================
      - name: 🎨 Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # 复制自定义文件
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv $GITHUB_WORKSPACE/files $OPENWRT_PATH/files
          fi
          
          # 复制配置文件
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # 🔥 在 .config 中启用 ccache
          echo "CONFIG_CCACHE=y" >> .config
          echo "CONFIG_DEVEL=y" >> .config
          
          # 执行自定义脚本
          if [ -d "${{ github.workspace }}/scripts" ]; then
            find "${{ github.workspace }}/scripts" -name "*.sh" -exec chmod +x {} \;
          fi
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          "${{ github.workspace }}/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL"
          "${{ github.workspace }}/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
          
          # 生成配置
          echo "⚙️ Generating defconfig..."
          make defconfig
          
          # 提取目标信息
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          # 获取最新版本
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases/latest" | \
            grep -m1 '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' || echo "unknown")
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "📱 Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "📌 Latest Release: $LATEST_RELEASE"
          
          # 显示插件状态
          echo "📦 Plugin Status:"
          echo "  Docker: $ENABLE_DOCKER"
          echo "  SSRP: $ENABLE_SSRP"
          echo "  Passwall: $ENABLE_PASSWALL"
          echo "  OpenClash: $ENABLE_OPENCLASH"
          echo "  Nikki: $ENABLE_NIKKI"
          echo "  Lucky: $ENABLE_LUCKY"
          echo "  OAF: $ENABLE_OAF"

      # ============================================
      # 12. 强制清理
      # ============================================
      - name: 🧹 Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "🧹 Force cleaning build directory..."
          
          # 保存配置文件
          cp .config .config.backup
          
          # 清理构建目录和 ccache
          make dirclean
          ccache -C
          
          # 恢复配置文件并重新生成
          cp .config.backup .config
          rm .config.backup
          make defconfig

      # ============================================
      # 13. 🔥 缓存预热（新增）
      # ============================================
      - name: 🔥 Warm Up Cache
        if: github.event.inputs.force_clean != 'true'
        run: |
          cd "$OPENWRT_PATH"
          
          # 检查工具链是否已缓存
          if [ ! -d "staging_dir/toolchain-"* ]; then
            echo "🔥 Warming up toolchain cache..."
            make tools/compile -j$((COMPILE_JOBS)) USE_CCACHE=1 CONFIG_CCACHE=y || true
            make toolchain/compile -j$((COMPILE_JOBS)) USE_CCACHE=1 CONFIG_CCACHE=y || true
          else
            echo "✅ Toolchain already cached"
          fi
          
          echo "=== Cache warm-up stats ==="
          ccache -s | grep -E "cache hit rate|files in cache" || true

      # ============================================
      # 14. 下载依赖包
      # ============================================
      - name: 📥 Download Packages
        run: |
          cd "$OPENWRT_PATH"
          echo "📥 Starting optimized package download..."
          
          # 提升下载并行度
          DOWNLOAD_JOBS=$((COMPILE_JOBS < 16 ? COMPILE_JOBS * 2 : 16))
          
          # 使用 aria2 加速下载（如果可用）
          if command -v aria2c >/dev/null 2>&1; then
            echo "🚀 Using aria2 for faster downloads"
            make download -j"$DOWNLOAD_JOBS" DOWNLOAD_TOOL="aria2c -x 4 -s 4" 2>&1 | tee download.log
          else
            make download -j"$DOWNLOAD_JOBS" 2>&1 | tee download.log
          fi

      # ============================================
      # 15. 🔥 优化编译过程（核心改进）
      # ============================================
      - name: 🔨 Compile Firmware (Optimized)
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          # 🔥 强制使用 ccache
          export USE_CCACHE=1
          export CCACHE_DIR=/home/runner/.ccache
          export PATH="/usr/lib/ccache:/usr/local/bin:$PATH"
          export CONFIG_CCACHE=y
          export CONFIG_DEVEL=y
          export FORCE_UNSAFE_CONFIGURE=1
          
          # 显示编译前状态
          echo "=== Pre-compile ccache stats ==="
          ccache -z  # 重置统计
          ccache -s
          echo "================================="
          
          compile_with_jobs() {
            local jobs=$1
            local log_file="compile_j${jobs}.log"
            echo "🔧 Compiling with $jobs jobs..."
            
            if timeout 500m make -j"$jobs" \
              USE_CCACHE=1 \
              CONFIG_CCACHE=y \
              CONFIG_DEVEL=y \
              2>&1 | tee "$log_file"; then
              echo "✅ Compilation successful with $jobs jobs"
              return 0
            else
              echo "❌ Compilation failed with $jobs jobs"
              return 1
            fi
          }
          
          # 尝试编译（逐步降低并行度）
          if compile_with_jobs "$COMPILE_JOBS"; then
            echo "status=success" >> $GITHUB_OUTPUT
          elif [ "$COMPILE_JOBS" -gt 2 ] && compile_with_jobs $((COMPILE_JOBS/2)); then
            echo "status=success" >> $GITHUB_OUTPUT
          elif [ "$COMPILE_JOBS" -gt 1 ] && compile_with_jobs 1; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ All compilation attempts failed"
            echo "=== Build Error Analysis ==="
            if [ -f "compile_j1.log" ]; then
              echo "Last 100 lines of single-threaded build:"
              tail -n 100 compile_j1.log
            fi
            echo "=== Recent package logs ==="
            find logs -name "*.log" -mtime -1 -exec echo "=== {} ===" \; -exec tail -n 30 {} \; 2>/dev/null | head -500
            exit 1
          fi
          
          # 🔥 详细的缓存统计
          echo "=== Post-compile ccache stats ==="
          ccache -s
          echo ""
          echo "=== ccache hit rate analysis ==="
          ccache -s | grep -E "Hits|Misses|Hit rate" || true
          echo ""
          echo "=== Cache directory details ==="
          du -sh /home/runner/.ccache
          find /home/runner/.ccache -type f | wc -l
          echo "================================="

      # ============================================
      # 16. 📊 缓存统计分析（增强版）
      # ============================================
      - name: 📊 Cache Statistics
        if: always()
        run: |
          cd "$OPENWRT_PATH"
          echo "=== Cache Effectiveness Report ==="
          echo "Date: $(date)"
          echo "Branch: ${{ env.REPO_BRANCH }}"
          echo "Config Hash: ${{ steps.cache-keys.outputs.config_hash }}"
          echo "Month Key: ${{ steps.cache-keys.outputs.month_key }}"
          echo ""
          
          echo "📁 Directory Sizes:"
          du -sh dl/ 2>/dev/null || echo "dl/: Not found"
          du -sh /home/runner/.ccache/ 2>/dev/null || echo ".ccache/: Not found"
          du -sh staging_dir/ 2>/dev/null || echo "staging_dir/: Not found"
          du -sh build_dir/toolchain-* 2>/dev/null || echo "toolchain build_dir/: Not found"
          du -sh build_dir/host* 2>/dev/null || echo "host build_dir/: Not found"
          echo ""
          
          echo "🎯 ccache Statistics:"
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR=/home/runner/.ccache
            ccache -s
            echo ""
            echo "📈 Cache Hit Rate:"
            ccache -s | grep -E "(cache hit|cache miss|files in cache|called for|Cacheable)" || echo "Stats not available"
          else
            echo "ccache not available"
          fi
          echo "================================="

      # ============================================
      # 17. 🔥 缓存持久化检查（新增）
      # ============================================
      - name: 📊 Verify Cache Persistence
        if: always()
        run: |
          echo "=== Cache Persistence Check ==="
          echo "CCACHE_DIR: $CCACHE_DIR"
          
          if [ -d "/home/runner/.ccache" ]; then
            echo "✅ ccache directory exists"
            echo "Size: $(du -sh /home/runner/.ccache | cut -f1)"
            echo "Files: $(find /home/runner/.ccache -type f | wc -l)"
            
            # 检查缓存有效性
            ccache -s | grep -E "cache hit rate|direct hit rate|preprocessed hit rate" || true
          else
            echo "❌ ccache directory not found"
          fi
          
          echo ""
          echo "=== Build Cache Status ==="
          for dir in dl staging_dir build_dir; do
            if [ -d "$OPENWRT_PATH/$dir" ]; then
              echo "✅ $dir: $(du -sh $OPENWRT_PATH/$dir | cut -f1)"
            else
              echo "❌ $dir: not found"
            fi
          done
          echo "================================="

      # ============================================
      # 18. 整理固件文件
      # ============================================
      - name: 📦 Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          echo "=== Generated Files ==="
          ls -lah
          
          # 安全提取内核版本
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # 复制配置文件
          cp "$OPENWRT_PATH/.config" build.config
          
          # 打包内核模块
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # 清理不需要的文件
          rm -f feeds.buildinfo version.buildinfo *.manifest
          
          # 生成固件信息
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          # 输出结果
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      # ============================================
      # 19. 上传 Artifacts
      # ============================================
      - name: 📤 Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      # ============================================
      # 20. 创建 Release
      # ============================================
      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }} • ${{ env.LATEST_RELEASE }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## 🎯 OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### 📊 构建信息
            | 项目 | 信息 |
            |------|------|
            | **版本** | `${{ env.LATEST_RELEASE }}` |
            | **日期** | `${{ env.BUILD_DATE }}` |
            | **目标** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **内核** | `${{ steps.organize.outputs.kernel_version }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **Password** | `${{ github.event.inputs.root_password }}` |
            
            ### 📦 包含的插件
            | 插件 | 状态 |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            
            ### 📝 源码信息
            - **仓库**: ${{ env.REPO_URL }}
            - **分支**: `${{ env.REPO_BRANCH }}`
            - **提交**: `${{ env.COMMIT_HASH }}`
            - **作者**: ${{ env.COMMIT_AUTHOR }}
            - **时间**: ${{ env.COMMIT_DATE }}
            - **消息**: ${{ env.COMMIT_MESSAGE }}
            
            ### 📥 安装说明
            
            #### UEFI 固件（推荐）：
            ```bash
            gunzip openwrt-*-generic-ext4-combined-efi.img.gz
            dd if=openwrt-*-generic-ext4-combined-efi.img of=/dev/sdX bs=4M status=progress
