# =================================================
# Author: P3TERX (Modified and Optimized)
# GitHub: https://github.com/P3TERX/Actions-OpenWrt
# =================================================

name: üíª x86_64

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.1.200"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      ssrp:
        description: "üöÄ ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      openclash:
        description: "‚ö° OpenClash"
        type: boolean
        default: true
      lucky:
        description: "üçÄ Lucky"
        type: boolean
        default: true
      oaf:
        description: "üõ°Ô∏è OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "üßπ Âº∫Âà∂Ê∏ÖÁêÜÁºìÂ≠ò"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04 
    timeout-minutes: 720
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}

    steps:
      # ============================================
      # 1. ÁéØÂ¢ÉÂàùÂßãÂåñ
      # ============================================
      - name: üîß Setup Environment
        id: env
        run: |
          # Êó∂Âå∫‰∏é Git Âü∫Êú¨ÈÖçÁΩÆ
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # ÊûÑÂª∫‰ø°ÊÅØ
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # Ëá™Âä®Âπ∂Ë°åËÆ°ÁÆó
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          # Âü∫‰∫éÊèí‰ª∂ÁªÑÂêàÁîüÊàêÁÆÄÂåñÁöÑÁºìÂ≠òÈîÆ
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)
          
          # Âë®Ê¨°ÈîÆÔºàÁî®‰∫éÂÆöÊúüÂà∑Êñ∞ÁºìÂ≠òÔºâ
          WEEK_KEY=$(date +'%Y%U')
          
          # ÊòæÁ§∫Á≥ªÁªü‰ø°ÊÅØ
          echo "====================================="
          echo "üìä System Information"
          echo "====================================="
          echo "CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
          echo "Cores: $PROC_COUNT | Memory: ${MEM_GB}GB | Jobs: $JOBS"
          echo "OS: $(lsb_release -ds) | Kernel: $(uname -r)"
          echo "Build: $VERSION ($BUILD_ID)"
          echo "Plugins: $PLUGINS_KEY"
          echo "Cache Hash: $PLUGINS_HASH"
          echo "Week: $WEEK_KEY"
          echo "====================================="
          
          # ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
            echo "PLUGINS_HASH=$PLUGINS_HASH"
            echo "WEEK_KEY=$WEEK_KEY"
          } >> $GITHUB_ENV

      # ============================================
      # 2. Á≥ªÁªü‰ºòÂåñ
      # ============================================
      - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: üíæ Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h

      # ============================================
      # 3. ‰ª£Á†ÅÊ£ÄÂá∫
      # ============================================
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ============================================
      # 4. ÊûÑÂª∫‰æùËµñÂÆâË£Ö
      # ============================================
      - name: üõ†Ô∏è Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: üì¶ Install LLVM
        uses: sbwml/actions@install-llvm

      # ============================================
      # 5. Ê∫êÁ†ÅÂáÜÂ§á‰∏é‰ø°ÊÅØÈááÈõÜ
      # ============================================
      - name: üì• Prepare OpenWrt Source
        run: |
          if ! git ls-remote --heads "$REPO_URL" "$REPO_BRANCH" &>/dev/null; then
            echo "‚ùå Branch $REPO_BRANCH not found in $REPO_URL"
            git ls-remote --heads "$REPO_URL" | head -10
            exit 1
          fi
          
          echo "üîÑ Cloning fresh OpenWrt source..."
          rm -rf openwrt
          
          for attempt in 1 2 3; do
            echo "üì• Clone attempt $attempt/3..."
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "‚ùå Clone attempt $attempt failed"
            rm -rf openwrt
            if [ $attempt -lt 3 ]; then
              sleep 10
            else
              echo "‚ùå All clone attempts failed"
              exit 1
            fi
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
          if git log -1 --pretty=format:'%an|%ci|%s|%H' &>/dev/null; then
            COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
            IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          else
            AUTHOR="Unknown"; DATE="Unknown"; MESSAGE="Unknown"; HASH="Unknown"
          fi
          
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV

      # ============================================
      # 6. Á®≥ÂÆöÁºìÂ≠òÁ≠ñÁï•
      # ============================================
      - name: ‚òÅÔ∏è Cache Toolchain
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.REPO_BRANCH }}-${{ env.WEEK_KEY }}-v6
          restore-keys: |
            toolchain-${{ env.REPO_BRANCH }}-${{ env.WEEK_KEY }}-
            toolchain-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Staging Directory
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
          key: staging-${{ env.REPO_BRANCH }}-${{ env.WEEK_KEY }}-v5
          restore-keys: |
            staging-${{ env.REPO_BRANCH }}-${{ env.WEEK_KEY }}-
            staging-${{ env.REPO_BRANCH }}-

      - name: ‚òÅÔ∏è Cache Build Host
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/host*
          key: buildhost-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v5
          restore-keys: |
            buildhost-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            buildhost-${{ env.REPO_BRANCH }}-
            
      - name: ‚òÅÔ∏è Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v6
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            downloads-${{ env.REPO_BRANCH }}-
            
      - name: ‚òÅÔ∏è Cache ccache
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v7
          restore-keys: |
            ccache-${{ env.REPO_BRANCH }}-${{ env.PLUGINS_HASH }}-
            ccache-${{ env.REPO_BRANCH }}-

      # ============================================
      # 7. ÁÆÄÂåñÁöÑ Feeds ÈÖçÁΩÆ
      # ============================================
      - name: üìö Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          
          # Á°Æ‰øù feeds ÁõÆÂΩïÂπ≤ÂáÄ
          echo "üßπ Cleaning feeds directory..."
          rm -rf feeds tmp/packagecache
          
          # Â§çÂà∂ feeds ÈÖçÁΩÆ
          cp "${{ github.workspace }}/${{ env.FEEDS_CONF }}" ./feeds.conf.default
          
          # Êõ¥Êñ∞ÂíåÂÆâË£Ö feeds
          echo "üîÑ Updating feeds..."
          ./scripts/feeds update -a
          echo "üì¶ Installing feeds..."
          ./scripts/feeds install -a

      # ============================================
      # 8. ccache ÈÖçÁΩÆ
      # ============================================
      - name: üî• Prepare ccache
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          
          mkdir -p "$CCACHE_DIR"
          
          # Âü∫Êú¨ÁöÑÂÆâÂÖ®ÈÖçÁΩÆ
          ccache -M 10G
          ccache -F 100000
          ccache --set-config=compression=true 2>/dev/null || true
          
          echo "=== ccache configuration ==="
          ccache -p 2>/dev/null || true
          ccache -s 2>/dev/null || true
          echo "=========================="

      # ============================================
      # 9. Ëá™ÂÆö‰πâÈÖçÁΩÆÂèäÊèí‰ª∂ÂºÄÂÖ≥
      # ============================================
      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # Â§çÂà∂Ëá™ÂÆö‰πâÊñá‰ª∂
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv $GITHUB_WORKSPACE/files $OPENWRT_PATH/files
          fi
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # ÊâßË°åËá™ÂÆö‰πâËÑöÊú¨
          chmod +x -R "${{ github.workspace }}/scripts"
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          "${{ github.workspace }}/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL"
          "${{ github.workspace }}/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
          
          # ÁîüÊàêÈÖçÁΩÆ
          echo "‚öôÔ∏è Generating defconfig..."
          make defconfig
          
          # ÊèêÂèñÁõÆÊ†á‰ø°ÊÅØ
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases/latest" | \
            grep -m1 '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' || echo "unknown")
            
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
            echo "LATEST_RELEASE=$LATEST_RELEASE"
          } >> $GITHUB_ENV
          
          echo "üì± Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "üìå Latest Release: $LATEST_RELEASE"

      # ============================================
      # 10. Âº∫Âà∂Ê∏ÖÁêÜ
      # ============================================
      - name: üßπ Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "üßπ Force cleaning build directory..."
          make dirclean

      # ============================================
      # 11. ‰∏ãËΩΩ‰æùËµñÂåÖ
      # ============================================
      - name: üì• Download Packages
        run: |
          cd "$OPENWRT_PATH"
          echo "üì• Starting optimized package download..."
          make download -j"$COMPILE_JOBS" V=s

      # ============================================
      # 12. ÁºñËØëÂõ∫‰ª∂
      # ============================================
      - name: üî® Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          # ‰ΩøÁî®Â∑≤ÈÖçÁΩÆÁöÑ ccache
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"

          # üî• È¢ùÂ§ñÁöÑÁºñËØë‰ºòÂåñ
          export FORCE_UNSAFE_CONFIGURE=1
          export CONFIG_CCACHE=y
          
          echo "üî® Starting compilation with $COMPILE_JOBS jobs..."
          echo "=== ccache initial stats ==="
          ccache -s
          echo "CCACHE_DIR: $CCACHE_DIR"
          echo "PATH: $PATH"
          echo "=========================="
          
          compile_with_jobs() {
            local jobs=$1
            local log_file="compile_j${jobs}.log"
            echo "üîß Compiling with $jobs jobs..."
            
            if timeout 500m make -j"$jobs" 2>&1 | tee "$log_file"; then
              echo "‚úÖ Compilation successful with $jobs jobs"
              return 0
            else
              echo "‚ùå Compilation failed with $jobs jobs"
              return 1
            fi
          }
          
          # Â∞ùËØïÁºñËØëÔºàÈÄêÊ≠•Èôç‰ΩéÂπ∂Ë°åÂ∫¶Ôºâ
          if compile_with_jobs "$COMPILE_JOBS"; then
            echo "status=success" >> $GITHUB_OUTPUT
          elif [ "$COMPILE_JOBS" -gt 2 ] && compile_with_jobs $((COMPILE_JOBS/2)); then
            echo "status=success" >> $GITHUB_OUTPUT
          elif [ "$COMPILE_JOBS" -gt 1 ] && compile_with_jobs 1; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå All compilation attempts failed"
            echo "=== Build Error Analysis ==="
            if [ -f "compile_j1.log" ]; then
              echo "Last 100 lines of single-threaded build:"
              tail -n 100 compile_j1.log
            fi
            echo "=== Recent package logs ==="
            find logs -name "*.log" -mtime -1 -exec echo "=== {} ===" \; -exec tail -n 30 {} \; 2>/dev/null | head -500
            exit 1
          fi
          
          echo "=== ccache final stats ==="
          ccache -s || echo "ccache stats not available"
          echo "Cache directory size: $(du -sh .ccache 2>/dev/null || echo 'N/A')"
          echo "========================="

      - name: üìä Cache Statistics
        if: always()
        run: |
          echo "=== Cache Effectiveness Report ==="
          echo "Date: $(date)"
          
          cd "$OPENWRT_PATH"
          
          echo "üéØ ccache Statistics:"
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR="$PWD/.ccache"
            ccache -s
          else
            echo "ccache not available"
          fi
          echo "================================="

      # ============================================
      # 13. Êï¥ÁêÜÂõ∫‰ª∂Êñá‰ª∂
      # ============================================
      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          echo "=== Generated Files ==="
          ls -lah
          
          # ÂÆâÂÖ®ÊèêÂèñÂÜÖÊ†∏ÁâàÊú¨
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "$OPENWRT_PATH/.config" build.config
          
          # ÊâìÂåÖÂÜÖÊ†∏Ê®°Âùó
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # Ê∏ÖÁêÜ‰∏çÈúÄË¶ÅÁöÑÊñá‰ª∂
          rm -f feeds.buildinfo version.buildinfo *.manifest
          
          # ÁîüÊàêÂõ∫‰ª∂‰ø°ÊÅØ
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          # ËæìÂá∫ÁªìÊûú
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      # ============================================
      # 14. ‰∏ä‰º† Artifacts
      # ============================================
      - name: üì§ Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6

      # ============================================
      # 15. ÂàõÂª∫ Release
      # ============================================
      - name: üöÄ Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} ‚Ä¢ ${{ env.FIRMWARE_TAG }} ‚Ä¢ ${{ env.LATEST_RELEASE }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### üìä ÊûÑÂª∫‰ø°ÊÅØ
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |--- |--- |
            | **ÁâàÊú¨** | `${{ env.LATEST_RELEASE }}` |
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏** | `${{ steps.organize.outputs.kernel_version }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            
            ### üì¶ ÂåÖÂê´ÁöÑÊèí‰ª∂
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |--- |--- |
            | Docker | ${{ github.event.inputs.docker == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            
            ### üìù Ê∫êÁ†Å‰ø°ÊÅØ
            - **‰ªìÂ∫ì**: ${{ env.REPO_URL }}
            - **ÂàÜÊîØ**: `${{ env.REPO_BRANCH }}`
            - **Êèê‰∫§**: `${{ env.COMMIT_HASH }}`
