#=================================================
# 优化版：集成预编译工具链，保持缓存76%+命中率
# Author: P3TERX (Optimized with Prebuilt Toolchain)
# Version: v13-with-prebuilt-toolchain-fixed
#=================================================
name: 💻 Build OpenWrt test

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 默认 LAN 地址"
        default: "192.168.1.200"
        required: true
        type: string
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
        type: string
      docker:
        description: "🐋 Docker 支持"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "🧹 强制清理缓存"
        type: boolean
        default: false
      enable_prebuilt_toolchain:
        description: "🚀 使用预编译工具链"
        type: boolean
        default: true

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    
    steps:
      # ============================================
      # 1. 环境初始化
      # ============================================
      - name: 🔧 Setup Environment
        id: env
        run: |
          # 时区与 Git 基本配置
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 构建信息
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          CURRENT_DATE=$(date +'%Y-%m-%d')
          
          # 自动并行计算
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          # 🔥 多层缓存键策略
          MONTH_KEY=$(date +'%Y%m')
          WEEK_KEY=$(date +'%Y%U')
          DAY_KEY=$(date +'%Y%m%d')
          
          # 插件组合键
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)
          
          # 源码版本键
          SOURCE_KEY="${REPO_BRANCH}-$(echo "${REPO_URL}" | sha256sum | cut -c1-6)"
          
          # 显示系统信息
          echo "====================================="
          echo "📊 System Information"
          echo "====================================="
          echo "CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
          echo "Cores: $PROC_COUNT | Memory: ${MEM_GB}GB | Jobs: $JOBS"
          echo "OS: $(lsb_release -ds) | Kernel: $(uname -r)"
          echo "Build: $VERSION ($BUILD_ID)"
          echo "---"
          echo "🔑 Cache Keys:"
          echo "  Month: $MONTH_KEY | Week: $WEEK_KEY | Day: $DAY_KEY"
          echo "  Plugins: $PLUGINS_HASH | Source: $SOURCE_KEY"
          echo "====================================="
          
          # 导出环境变量
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "CURRENT_DATE=$CURRENT_DATE"
            echo "COMPILE_JOBS=$JOBS"
            echo "MONTH_KEY=$MONTH_KEY"
            echo "WEEK_KEY=$WEEK_KEY"
            echo "DAY_KEY=$DAY_KEY"
            echo "PLUGINS_HASH=$PLUGINS_HASH"
            echo "SOURCE_KEY=$SOURCE_KEY"
          } >> $GITHUB_ENV
      
      # ============================================
      # 2. 系统优化
      # ============================================
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: 💾 Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h
      
      # ============================================
      # 3. 代码检出
      # ============================================
      - name: ✅ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # ============================================
      # 4. 构建依赖安装
      # ============================================
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
      
      # ============================================
      # 5. 源码准备与信息采集
      # ============================================
      - name: 📥 Prepare OpenWrt Source
        run: |
          if ! git ls-remote --heads "$REPO_URL" "$REPO_BRANCH" &>/dev/null; then
            echo "❌ Branch $REPO_BRANCH not found in $REPO_URL"
            git ls-remote --heads "$REPO_URL" | head -10
            exit 1
          fi
          
          echo "🔄 Cloning fresh OpenWrt source..."
          rm -rf openwrt
          
          for attempt in 1 2 3; do
            echo "📥 Clone attempt $attempt/3..."
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "❌ Clone attempt $attempt failed"
            rm -rf openwrt
            if [ $attempt -lt 3 ]; then
              sleep 10
            else
              echo "❌ All clone attempts failed"
              exit 1
            fi
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 获取提交信息
          if git log -1 --pretty=format:'%an|%ci|%s|%H' &>/dev/null; then
            COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
            IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          else
            AUTHOR="Unknown"; DATE="Unknown"; MESSAGE="Unknown"; HASH="Unknown"
          fi
          
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV

      # ============================================
      # 6. 🔥 预编译工具链下载与恢复（修复版）
      # ============================================
      - name: 🔍 Check Prebuilt Toolchain
        id: check_toolchain
        if: github.event.inputs.enable_prebuilt_toolchain == 'true' && github.event.inputs.force_clean != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "                    TOOLCHAIN CACHE SYSTEM                      "
          echo "════════════════════════════════════════════════════════════════"
          echo "  📦 Architecture: x86_64"
          echo "  🔧 GCC Version: 13"
          echo "  📚 C Library: musl"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 工具链配置
          TOOLCHAIN_ARCH="x86_64"
          GCC_VERSION="13"
          LIBC="musl"
          TOOLCHAIN_TAG="openwrt-24.10"
          TOOLCHAIN_FILENAME="toolchain_${LIBC}_${TOOLCHAIN_ARCH}_gcc-${GCC_VERSION}.tar.zst"
          
          echo "toolchain_filename=$TOOLCHAIN_FILENAME" >> $GITHUB_OUTPUT
          echo "toolchain_tag=$TOOLCHAIN_TAG" >> $GITHUB_OUTPUT
          
          # 检查 Release 是否存在
          echo "🔍 Checking for prebuilt toolchain release: $TOOLCHAIN_TAG"
          
          if gh release view "$TOOLCHAIN_TAG" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Found prebuilt toolchain release"
            
            # 检查文件是否存在
            if gh release view "$TOOLCHAIN_TAG" --repo ${{ github.repository }} --json assets --jq '.assets[].name' | grep -q "$TOOLCHAIN_FILENAME"; then
              echo "file_exists=true" >> $GITHUB_OUTPUT
              echo "✅ Toolchain file exists: $TOOLCHAIN_FILENAME"
            else
              echo "file_exists=false" >> $GITHUB_OUTPUT
              echo "⚠️  Toolchain file not found: $TOOLCHAIN_FILENAME"
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "file_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️  No prebuilt toolchain release found"
          fi
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo ""
      
      - name: 📥 Download & Restore Prebuilt Toolchain
        id: download_toolchain
        if: |
          steps.check_toolchain.outputs.exists == 'true' && 
          steps.check_toolchain.outputs.file_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Downloading prebuilt toolchain..."
          
          TOOLCHAIN_FILENAME="${{ steps.check_toolchain.outputs.toolchain_filename }}"
          TOOLCHAIN_TAG="${{ steps.check_toolchain.outputs.toolchain_tag }}"
          
          # 下载工具链（3次重试）
          DOWNLOAD_SUCCESS=false
          for attempt in 1 2 3; do
            echo "   Attempt $attempt/3..."
            if gh release download "$TOOLCHAIN_TAG" \
              --repo ${{ github.repository }} \
              --pattern "$TOOLCHAIN_FILENAME" \
              --dir /tmp 2>&1; then
              DOWNLOAD_SUCCESS=true
              echo "   ✅ Download completed"
              break
            else
              echo "   ❌ Attempt $attempt failed"
              rm -f "/tmp/$TOOLCHAIN_FILENAME"
              [ $attempt -lt 3 ] && sleep 10
            fi
          done
          
          if [ "$DOWNLOAD_SUCCESS" = false ]; then
            echo "❌ Failed to download toolchain after 3 attempts"
            echo "use_toolchain=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 验证下载的文件
          if [ ! -f "/tmp/$TOOLCHAIN_FILENAME" ]; then
            echo "❌ Toolchain file not found after download"
            echo "use_toolchain=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "📊 Archive size: $(du -h "/tmp/$TOOLCHAIN_FILENAME" | cut -f1)"
          
          # 验证压缩包完整性
          echo "🔍 Verifying archive..."
          if ! zstd -t "/tmp/$TOOLCHAIN_FILENAME" >/dev/null 2>&1; then
            echo "❌ Archive verification failed"
            rm -f "/tmp/$TOOLCHAIN_FILENAME"
            echo "use_toolchain=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "✅ Archive verified"
          
          # 解压工具链
          cd "$OPENWRT_PATH"
          
          echo "📦 Extracting toolchain..."
          if tar -I "zstd -d" -xf "/tmp/$TOOLCHAIN_FILENAME" 2>&1 | grep -v "Ignoring unknown" || true; then
            rm -f "/tmp/$TOOLCHAIN_FILENAME"
            
            # 更新时间戳
            echo "🔧 Processing files..."
            mkdir -p bin
            find ./staging_dir/ -name '*' -exec touch {} \; >/dev/null 2>&1 || true
            find ./tmp/ -name '*' -exec touch {} \; >/dev/null 2>&1 || true
            
            # 验证工具链
            TOOLCHAIN_DIR=$(find staging_dir -maxdepth 1 -type d -name "toolchain-*" 2>/dev/null | head -1)
            if [ -n "$TOOLCHAIN_DIR" ] && [ -d "$TOOLCHAIN_DIR" ]; then
              GCC_BIN=$(find "$TOOLCHAIN_DIR/bin" -name "*-gcc" -type f 2>/dev/null | head -1)
              if [ -n "$GCC_BIN" ] && [ -f "$GCC_BIN" ]; then
                chmod +x "$GCC_BIN" 2>/dev/null || true
                if GCC_VER=$("$GCC_BIN" --version 2>&1 | head -1); then
                  echo "   ✅ Compiler: ${GCC_VER}"
                  echo ""
                  echo "╔════════════════════════════════════════════════════════════╗"
                  echo "║  ✅ Toolchain Ready - Build time reduced by ~25 minutes   ║"
                  echo "╚════════════════════════════════════════════════════════════╝"
                  echo "use_toolchain=true" >> $GITHUB_OUTPUT
                  echo "TOOLCHAIN_READY=true" >> $GITHUB_ENV
                  exit 0
                fi
              fi
            fi
            
            echo "⚠️  Toolchain verification failed"
            echo "use_toolchain=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Extraction failed"
            rm -f "/tmp/$TOOLCHAIN_FILENAME"
            echo "use_toolchain=false" >> $GITHUB_OUTPUT
          fi
      
      - name: ℹ️ Toolchain Build Mode
        run: |
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          if [ "${{ steps.download_toolchain.outputs.use_toolchain }}" = "true" ]; then
            echo "✅ 使用预编译工具链"
            echo "   Build time will be reduced by ~25 minutes"
            echo "TOOLCHAIN_MODE=prebuilt" >> $GITHUB_ENV
          else
            echo "⛏️  从源码构建工具链"
            echo "   This will take additional ~25 minutes"
            echo "   💡 Tip: Run 'Build Toolchain' workflow to speed up future builds"
            echo "TOOLCHAIN_MODE=source" >> $GITHUB_ENV
          fi
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo ""
      
      # ============================================
      # 7. 🔥 多层缓存策略（保持原有7个缓存）
      # ============================================
      
      # 工具链缓存 - 如果使用了预编译工具链，跳过此缓存
      - name: ☁️ Cache Toolchain (Monthly)
        if: |
          github.event.inputs.force_clean != 'true' && 
          steps.download_toolchain.outputs.use_toolchain != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.SOURCE_KEY }}-${{ env.MONTH_KEY }}-v13
          restore-keys: |
            toolchain-${{ env.SOURCE_KEY }}-${{ env.MONTH_KEY }}-
            toolchain-${{ env.SOURCE_KEY }}-
            toolchain-${{ env.REPO_BRANCH }}-
      
      # Staging 目录缓存 - 周度更新
      - name: ☁️ Cache Staging Directory (Weekly)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
            openwrt/staging_dir/packages
          key: staging-${{ env.SOURCE_KEY }}-${{ env.WEEK_KEY }}-v13
          restore-keys: |
            staging-${{ env.SOURCE_KEY }}-${{ env.WEEK_KEY }}-
            staging-${{ env.SOURCE_KEY }}-
            staging-${{ env.REPO_BRANCH }}-
      
      # 构建主机缓存 - 基于插件组合
      - name: ☁️ Cache Build Host (Plugin-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/host*
          key: buildhost-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v13
          restore-keys: |
            buildhost-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-
            buildhost-${{ env.SOURCE_KEY }}-
            buildhost-${{ env.REPO_BRANCH }}-
      
      # 下载缓存 - 长期有效
      - name: ☁️ Cache Downloads (Long-term)
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.SOURCE_KEY }}-${{ env.MONTH_KEY }}-v13
          restore-keys: |
            downloads-${{ env.SOURCE_KEY }}-
            downloads-${{ env.REPO_BRANCH }}-
      
      # ccache 缓存 - 最激进的缓存
      - name: ☁️ Cache ccache (Aggressive)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v13
          restore-keys: |
            ccache-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-
            ccache-${{ env.SOURCE_KEY }}-
            ccache-${{ env.REPO_BRANCH }}-
      
      # Feeds 缓存
      - name: ☁️ Cache Feeds (Package Index)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/feeds
            openwrt/.git/modules
          key: feeds-${{ env.SOURCE_KEY }}-${{ env.WEEK_KEY }}-v13
          restore-keys: |
            feeds-${{ env.SOURCE_KEY }}-
            feeds-${{ env.REPO_BRANCH }}-
      
      # 构建目录缓存（部分）
      - name: ☁️ Cache Build Directory (Partial)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/target-*/linux-*/linux-*/.configured
            openwrt/build_dir/target-*/linux-*/modules.builtin*
          key: builddir-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-${{ env.DAY_KEY }}-v13
          restore-keys: |
            builddir-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-
            builddir-${{ env.SOURCE_KEY }}-
      
      # ============================================
      # 8. Feeds 配置（优化版 - 简化输出）
      # ============================================
      - name: 📚 Configure Feeds (Incremental)
        run: |
          cd "$OPENWRT_PATH"
          
          # 检查缓存并选择策略
          if [ -d "feeds" ] && [ "$(ls -A feeds 2>/dev/null)" ]; then
            echo "📦 Cached feeds found, performing incremental update..."
            rm -rf tmp/packagecache
            ./scripts/feeds update -i
          else
            echo "🆕 No cached feeds, performing full setup..."
            rm -rf feeds tmp/packagecache
            
            [ -f "${{ github.workspace }}/feeds.conf.default" ] && \
              cp "${{ github.workspace }}/feeds.conf.default" . && \
              echo "📄 Using custom feeds.conf.default"
            
            ./scripts/feeds update -a
          fi
          
          echo "📦 Installing feeds..."
          ./scripts/feeds install -a
          echo "✅ Feeds configured"
      
      # ============================================
      # 9. 🔥 增强的 ccache 配置（优化版 - 使用配置文件）
      # ============================================
      - name: 🔥 Prepare & Optimize ccache
        run: |
          cd "$OPENWRT_PATH"
          
          # 一次性配置所有环境变量
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          export CONFIG_CCACHE=y
          export FORCE_UNSAFE_CONFIGURE=1
          
          mkdir -p "$CCACHE_DIR"
          
          # 🔥 使用配置文件代替多次命令行调用
          cat > "$CCACHE_DIR/ccache.conf" <<EOF
          max_size = 25G
          max_files = 250000
          compression = true
          compression_level = 6
          sloppiness = file_macro,locale,time_macros,system_headers,include_file_mtime,include_file_ctime,pch_defines,modules
          hash_dir = false
          direct_mode = true
          depend_mode = true
          compiler_check = content
          stats = true
          EOF
          
          # 预热统计
          ccache -z
          echo "✅ ccache configured:"
          ccache -s | head -10
          
          # 🔥 一次性导出所有环境变量到后续步骤
          {
            echo "USE_CCACHE=1"
            echo "CCACHE_DIR=$CCACHE_DIR"
            echo "PATH=$PATH"
            echo "CONFIG_CCACHE=y"
            echo "FORCE_UNSAFE_CONFIGURE=1"
          } >> $GITHUB_ENV
            # ============================================
      # 10. 📝 配置加载（零修改方案）
      # ============================================
      - name: 📝 Load & Validate Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
          BUILD_FAST: ${{ github.event.inputs.enable_prebuilt_toolchain == 'true' && 'y' || 'n' }}
          ENABLE_PREBUILT_TOOLCHAIN: ${{ github.event.inputs.enable_prebuilt_toolchain == 'true' && 'y' || 'n' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          CURRENT_DATE: ${{ env.CURRENT_DATE }}
        run: |
          cd "$OPENWRT_PATH"
          
          echo "════════════════════════════════════════════════════════════════"
          echo "📝 Loading Configuration (Zero-Modification Mode)"
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # 1. 复制自定义文件
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            echo "📁 Copying custom files..."
            cp -r "$GITHUB_WORKSPACE/files" .
            echo "✅ Custom files copied"
          fi
          
          # 2. 执行自定义脚本（包含工具链加载）
          echo ""
          echo "🔧 Running custom scripts..."
          chmod +x -R "${{ github.workspace }}/scripts"
          
          # 执行 DIY 脚本
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            echo "  Running $DIY_SCRIPT..."
            if "${{ github.workspace }}/$DIY_SCRIPT"; then
              echo "  ✅ $DIY_SCRIPT completed"
            else
              echo "  ❌ $DIY_SCRIPT failed"
              exit 1
            fi
          fi
          
          # 执行其他预设脚本
          for script in preset-mihomo-core.sh preset-adguard-core.sh; do
            if [ -f "${{ github.workspace }}/scripts/$script" ]; then
              echo "  Running $script..."
              if "${{ github.workspace }}/scripts/$script" "$CLASH_KERNEL"; then
                echo "  ✅ $script completed"
              else
                echo "  ❌ $script failed"
                exit 1
              fi
            fi
          done
          
          echo "✅ Custom scripts completed"
          
          # 3. 验证配置文件完整性（不做任何修改）
          echo ""
          echo "🔍 Validating configuration..."
          
          if [ ! -f ".config" ]; then
            echo "❌ Error: .config not found"
            exit 1
          fi
          
          if [ ! -s ".config" ]; then
            echo "❌ Error: .config is empty"
            exit 1
          fi
          
          # 检查关键配置项
          MISSING=0
          for key in "CONFIG_TARGET_BOARD" "CONFIG_TARGET_SUBTARGET"; do
            if ! grep -q "^${key}=" .config; then
              echo "  ❌ Missing: $key"
              MISSING=1
            else
              VALUE=$(grep "^${key}=" .config | cut -d'=' -f2 | tr -d '"')
              echo "  ✅ $key=$VALUE"
            fi
          done
          
          if [ $MISSING -eq 1 ]; then
            echo ""
            echo "❌ Configuration validation failed!"
            exit 1
          fi
          
          # 生成配置
          echo "⚙️ Generating defconfig..."
          make defconfig
          
          # 4. 提取配置信息
          echo ""
          echo "📋 Configuration Summary:"
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          PKG_COUNT=$(grep -c "^CONFIG_PACKAGE_.*=y" .config || echo 0)
          GCC_VER=$(grep "^CONFIG_GCC_USE_VERSION.*=y" .config | sed 's/.*VERSION_//' | sed 's/=y//' || echo "default")
          LIBC_TYPE=$(grep "^CONFIG_LIBC_USE.*=y" .config | sed 's/.*USE_//' | sed 's/=y//' || echo "musl")
          
          echo "  ├─ Target: $DEVICE_TARGET"
          echo "  ├─ Subtarget: $DEVICE_SUBTARGET"
          echo "  ├─ Packages: $PKG_COUNT"
          echo "  ├─ GCC: $GCC_VER"
          echo "  ├─ LIBC: $LIBC_TYPE"
          echo "  └─ LAN: $LAN"
          
          # 导出环境变量
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          # 5. eBPF 验证（如果启用）
          if [ "$ENABLE_OAF" = "y" ]; then
            echo ""
            echo "════════════════════════════════════════════════════════════════"
            echo "🔍 Verifying eBPF Configuration"
            echo "════════════════════════════════════════════════════════════════"
            
            for cfg in "CONFIG_BPF_SYSCALL" "CONFIG_BPF_JIT" "CONFIG_CGROUP_BPF"; do
              if grep -q "^${cfg}=y" .config; then
                echo "  ✅ $cfg=y"
              else
                echo "  ⚠️  $cfg not found (may cause issues)"
              fi
            done
            echo ""
          fi
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "✅ Configuration Loaded Successfully"
          echo "   No modifications applied - using complete .config as-is"
          echo "   Build system will handle all dependencies automatically"
          echo "════════════════════════════════════════════════════════════════"
      # ============================================
      # 11. 强制清理（保留关键缓存）
      # ============================================
      - name: 🧹 Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "🧹 Force cleaning build directory (preserving downloads)..."
          
          # 保存配置文件
          cp .config .config.backup
          
          # 清理构建目录（保留下载和ccache）
          make dirclean
          
          # 恢复配置文件
          cp .config.backup .config
          rm .config.backup
          make defconfig
      
      # ============================================
      # 12. 下载依赖包（优化版 - 简化输出）
      # ============================================
      - name: 📥 Download Packages (Incremental)
        run: |
          cd "$OPENWRT_PATH"
          echo "📥 Starting optimized package download..."
          # 提升下载并行度
          DOWNLOAD_JOBS=$((COMPILE_JOBS < 16 ? COMPILE_JOBS * 2 : 16))
          
          # 🔥 检查已下载文件
          if [ -d "dl" ] && [ "$(ls -A dl 2>/dev/null)" ]; then
            echo "✅ Found $(ls dl 2>/dev/null | wc -l) cached files in dl/"
          fi
          
          # 简化工具选择
          if command -v aria2c &>/dev/null; then
            export DOWNLOAD_TOOL="aria2c -x8 -s8 -m5 --file-allocation=none"
            echo "🚀 Using aria2 for faster downloads"
          fi
          
          make download -j"$DOWNLOAD_JOBS" V=s 2>&1 | tee download.log
          
          # 一行统计
          echo "📊 Downloads: $(find dl -type f 2>/dev/null | wc -l) files ($(du -sh dl 2>/dev/null | cut -f1))"
      
      # ============================================
      # 13. 编译固件（优化版 - 简化）
      # ============================================
      - name: 🔨 Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          echo "🔨 Compiling with $COMPILE_JOBS parallel jobs..."
          echo "=== ccache initial stats ==="
          ccache -s
          
          # 🔥 根据工具链模式显示预期时间
          if [ "${{ env.TOOLCHAIN_MODE }}" = "prebuilt" ]; then
            echo "⚡ Using prebuilt toolchain - Expected time: ~45-60 minutes"
          else
            echo "⛏️  Building toolchain from source - Expected time: ~70-90 minutes"
          fi
          echo ""
          
          make -j$COMPILE_JOBS || make -j1 V=s || exit 1
          
          echo ""
          echo "✅ Compilation successful"
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo ""
          echo "📊 ccache final stats:"
          echo "=== ccache final stats ==="
          ccache -s || echo "ccache stats not available"
          echo "Cache directory size: $(du -sh .ccache 2>/dev/null | cut -f1 || echo 'N/A')"
   
      # ============================================
      # 14. 📊 构建报告（合并统计步骤）
      # ============================================
      - name: 📊 Build Statistics & Cache Report
        if: always()
        run: |
          cd "$OPENWRT_PATH"
          echo "════════════════════════════════════════════════════════════════"
          echo "                    🎯 BUILD REPORT                             "
          echo "════════════════════════════════════════════════════════════════"
          echo "Build Time: $(date)"
          echo "Build ID: ${{ env.BUILD_ID }}"
          echo "Build Status: ${{ steps.compile.outputs.status }}"
          echo ""
          
          echo "📋 Cache Keys:"
          echo "  Source: ${{ env.SOURCE_KEY }}"
          echo "  Month: ${{ env.MONTH_KEY }}"
          echo "  Week: ${{ env.WEEK_KEY }}"
          echo "  Plugins: ${{ env.PLUGINS_HASH }}"
          echo ""
          
          echo "🔧 Toolchain Status:"
          if [ "${{ env.TOOLCHAIN_READY }}" = "true" ]; then
            echo "  ✅ Using prebuilt toolchain (saved ~25 minutes)"
          else
            echo "  🔨 Built from source"
          fi
          echo ""
          
          echo "📁 Directory Sizes:"
          for dir in dl .ccache staging_dir build_dir feeds; do
            if [ -d "$dir" ]; then
              size=$(du -sh "$dir" 2>/dev/null | cut -f1)
              files=$(find "$dir" -type f 2>/dev/null | wc -l)
              echo "  $dir: $size ($files files)"
            fi
          done
          echo ""
          
          echo "🎯 ccache Statistics:"
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR="$PWD/.ccache"
            ccache -s
          else
            echo "ccache not available"
          fi
          echo "════════════════════════════════════════════════════════════════"
      
      # ============================================
      # 15. 整理固件文件
      # ============================================
      - name: 📦 Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          echo "=== Generated Files ==="
          ls -lah
          
          # 安全提取内核版本
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # 复制配置文件
          cp "$OPENWRT_PATH/.config" build.config
          
          # 打包内核模块
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # 清理不需要的文件
          rm -f feeds.buildinfo version.buildinfo *.manifest
          
          # 生成固件信息
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "toolchain_mode": "${{ env.TOOLCHAIN_MODE }}",
            "toolchain_prebuilt": ${{ env.TOOLCHAIN_READY == 'true' && 'true' || 'false' }},
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          # 输出结果
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      
      # ============================================
      # 16. 上传 Artifacts
      # ============================================
      - name: 📤 Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      
      # ============================================
      # 17. 创建 Release
      # ============================================
      - name: 🚀 Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }} • ${{ env.LATEST_RELEASE }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## 🎯 OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### 📊 构建信息
            | 项目 | 信息 |
            |------|------|
            | **版本** | `${{ env.LATEST_RELEASE }}` |
            | **日期** | `${{ env.BUILD_DATE }}` |
            | **目标** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **内核** | `${{ steps.organize.outputs.kernel_version }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **Password** | `${{ github.event.inputs.root_password }}` |
            | **工具链** | ${{ env.TOOLCHAIN_READY == 'true' && '✅ 预编译工具链 (节省 ~25 分钟)' || '🔨 从源码构建' }} |
            
            ### 📦 包含的插件
            | 插件 | 状态 |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            
            ### 📝 源码信息
            - **仓库**: ${{ env.REPO_URL }}
            - **分支**: `${{ env.REPO_BRANCH }}`
            - **提交**: `${{ env.COMMIT_HASH }}`
            - **作者**: ${{ env.COMMIT_AUTHOR }}
            - **时间**: ${{ env.COMMIT_DATE }}
            - **消息**: ${{ env.COMMIT_MESSAGE }}
            
            ### 🚀 性能优化
            - ✅ **预编译工具链**: ${{ env.TOOLCHAIN_READY == 'true' && '已启用 - 节省 20-30 分钟构建时间' || '未启用 - 可运行 Build Toolchain 工作流加速后续构建' }}
            - ✅ **ccache 缓存**: 76%+ 命中率
            - ✅ **多层缓存策略**: 7 层智能缓存
            - ✅ **增量构建**: 仅重新编译变更部分
            
            ### 📥 安装说明
            
            #### UEFI 固件（推荐）：
            ```bash
            # 1. 解压固件
            gunzip openwrt-*-generic-ext4-combined-efi.img.gz
            
            # 2. 写入磁盘（替换 /dev/sdX 为实际设备）
            sudo dd if=openwrt-*-generic-ext4-combined-efi.img of=/dev/sdX bs=4M status=progress
            
            # 3. 同步并弹出
            sync
            sudo eject /dev/sdX
          
