#=================================================
# ‰ºòÂåñÁâàÔºö‰øùÊåÅÁºìÂ≠ò76%+ÂëΩ‰∏≠ÁéáÔºåÊ∂àÈô§ÂÜó‰Ωô‰ª£Á†Å
# Author: P3TERX (Optimized - Redundancy Removed)
# Version: v12-with-prebuilt-toolchain
#=================================================
name: üíª Build OpenWrt (x86_64)

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.1.200"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      ssrp:
        description: "üöÄ ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      openclash:
        description: "‚ö° OpenClash"
        type: boolean
        default: true
      lucky:
        description: "üçÄ Lucky"
        type: boolean
        default: true
      oaf:
        description: "üõ°Ô∏è OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "üßπ Âº∫Âà∂Ê∏ÖÁêÜÁºìÂ≠ò"
        type: boolean
        default: false

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive

concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false

jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    
    steps:
      # ============================================
      # 1. ÁéØÂ¢ÉÂàùÂßãÂåñ
      # ============================================
      - name: üîß Setup Environment
        id: env
        run: |
          # Êó∂Âå∫‰∏é Git Âü∫Êú¨ÈÖçÁΩÆ
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # ÊûÑÂª∫‰ø°ÊÅØ
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # Ëá™Âä®Âπ∂Ë°åËÆ°ÁÆó
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          JOBS=$((MEM_GB / 2))
          JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
          JOBS=$((JOBS < 1 ? 1 : JOBS))
          
          # üî• Â§öÂ±ÇÁºìÂ≠òÈîÆÁ≠ñÁï•
          MONTH_KEY=$(date +'%Y%m')
          WEEK_KEY=$(date +'%Y%U')
          DAY_KEY=$(date +'%Y%m%d')
          
          # Êèí‰ª∂ÁªÑÂêàÈîÆ
          PLUGINS_KEY="${{ github.event.inputs.docker }}-${{ github.event.inputs.ssrp }}-${{ github.event.inputs.passwall }}-${{ github.event.inputs.nikki }}-${{ github.event.inputs.openclash }}-${{ github.event.inputs.lucky }}-${{ github.event.inputs.oaf }}"
          PLUGINS_HASH=$(echo "$PLUGINS_KEY" | sha256sum | cut -c1-8)
          
          # Ê∫êÁ†ÅÁâàÊú¨ÈîÆ
          SOURCE_KEY="${REPO_BRANCH}-$(echo "${REPO_URL}" | sha256sum | cut -c1-6)"
          
          # ÊòæÁ§∫Á≥ªÁªü‰ø°ÊÅØ
          echo "====================================="
          echo "üìä System Information"
          echo "====================================="
          echo "CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
          echo "Cores: $PROC_COUNT | Memory: ${MEM_GB}GB | Jobs: $JOBS"
          echo "OS: $(lsb_release -ds) | Kernel: $(uname -r)"
          echo "Build: $VERSION ($BUILD_ID)"
          echo "---"
          echo "üîë Cache Keys:"
          echo "  Month: $MONTH_KEY | Week: $WEEK_KEY | Day: $DAY_KEY"
          echo "  Plugins: $PLUGINS_HASH | Source: $SOURCE_KEY"
          echo "====================================="
          
          # ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "COMPILE_JOBS=$JOBS"
            echo "MONTH_KEY=$MONTH_KEY"
            echo "WEEK_KEY=$WEEK_KEY"
            echo "DAY_KEY=$DAY_KEY"
            echo "PLUGINS_HASH=$PLUGINS_HASH"
            echo "SOURCE_KEY=$SOURCE_KEY"
          } >> $GITHUB_ENV
      
      # ============================================
      # 2. Á≥ªÁªü‰ºòÂåñ
      # ============================================
      - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk
        
      - name: üíæ Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h
      
      # ============================================
      # 3. ‰ª£Á†ÅÊ£ÄÂá∫
      # ============================================
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # ============================================
      # 4. ÊûÑÂª∫‰æùËµñÂÆâË£Ö
      # ============================================
      - name: üõ†Ô∏è Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: üì¶ Install LLVM
        uses: sbwml/actions@install-llvm
      
      # ============================================
      # 5. Ê∫êÁ†ÅÂáÜÂ§á‰∏é‰ø°ÊÅØÈááÈõÜ
      # ============================================
      - name: üì• Prepare OpenWrt Source
        run: |
          if ! git ls-remote --heads "$REPO_URL" "$REPO_BRANCH" &>/dev/null; then
            echo "‚ùå Branch $REPO_BRANCH not found in $REPO_URL"
            git ls-remote --heads "$REPO_URL" | head -10
            exit 1
          fi
          
          echo "üîÑ Cloning fresh OpenWrt source..."
          rm -rf openwrt
          
          for attempt in 1 2 3; do
            echo "üì• Clone attempt $attempt/3..."
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            fi
            echo "‚ùå Clone attempt $attempt failed"
            rm -rf openwrt
            if [ $attempt -lt 3 ]; then
              sleep 10
            else
              echo "‚ùå All clone attempts failed"
              exit 1
            fi
          done
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
          if git log -1 --pretty=format:'%an|%ci|%s|%H' &>/dev/null; then
            COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
            IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          else
            AUTHOR="Unknown"; DATE="Unknown"; MESSAGE="Unknown"; HASH="Unknown"
          fi
          
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV

      # ============================================
      # 6. ‰∏ãËΩΩÂπ∂Â∫îÁî®È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ
      # ============================================
      - name: üîß Download Prebuilt Toolchain
        id: download_toolchain
        run: |
          echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
          echo "‚ïë      üîß Downloading Prebuilt Toolchain     ‚ïë"
          echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
          echo ""
          
          # ËÆ°ÁÆóÂ∑•ÂÖ∑ÈìæÂìàÂ∏åÔºà‰∏é build-toolchain.yml ‰øùÊåÅ‰∏ÄËá¥Ôºâ
          TARGET_PLATFORM="x86/64"
          TOOLCHAIN_HASH=$(echo "${{ env.REPO_BRANCH }}-${TARGET_PLATFORM}" | md5sum | cut -d' ' -f1)
          TOOLCHAIN_TAG="toolchain-${TOOLCHAIN_HASH}"
          
          echo "üîç Looking for toolchain: $TOOLCHAIN_TAG"
          
          # Ê£ÄÊü•Â∑•ÂÖ∑ÈìæÊòØÂê¶Â≠òÂú®
          if gh release view "$TOOLCHAIN_TAG" >/dev/null 2>&1; then
            echo "‚úÖ Found prebuilt toolchain!"
            
            # ‰∏ãËΩΩÂ∑•ÂÖ∑Èìæ
            mkdir -p /tmp/toolchain-download
            cd /tmp/toolchain-download
            
            echo "üì• Downloading toolchain package..."
            gh release download "$TOOLCHAIN_TAG" \
              --pattern "toolchain-*.tar.gz" \
              --dir . || {
                echo "‚ùå Download failed, will build from scratch"
                echo "use_toolchain=false" >> $GITHUB_OUTPUT
                exit 0
              }
            
            # Ëß£ÂéãÂ∑•ÂÖ∑Èìæ
            echo "üì¶ Extracting toolchain..."
            TOOLCHAIN_FILE=$(ls toolchain-*.tar.gz | head -1)
            
            if [ -f "$TOOLCHAIN_FILE" ]; then
              tar -xzf "$TOOLCHAIN_FILE" -C /tmp/
              
              # Â§çÂà∂Âà∞ OpenWrt ÁõÆÂΩï
              echo "üìã Applying toolchain to OpenWrt..."
              cd "${{ env.OPENWRT_PATH }}"
              
              # Â§çÂà∂ staging_dir
              if [ -d "/tmp/toolchain/staging_dir" ]; then
                mkdir -p staging_dir
                cp -r /tmp/toolchain/staging_dir/* staging_dir/ 2>/dev/null || true
                echo "‚úÖ Copied staging_dir"
              fi
              
              # Â§çÂà∂ build_dir/toolchain
              if [ -d "/tmp/toolchain/build_dir" ]; then
                mkdir -p build_dir
                cp -r /tmp/toolchain/build_dir/toolchain-* build_dir/ 2>/dev/null || true
                echo "‚úÖ Copied toolchain build files"
              fi
              
              # Â§çÂà∂ build_dir/host
              if [ -d "/tmp/toolchain/build_dir/host" ]; then
                cp -r /tmp/toolchain/build_dir/host build_dir/ 2>/dev/null || true
                echo "‚úÖ Copied host build files"
              fi
              
              # È™åËØÅÂ∑•ÂÖ∑Èìæ
              echo ""
              echo "üîç Verifying toolchain..."
              TOOLCHAIN_PATH=$(find staging_dir -type d -name "toolchain-*" | head -1)
              
              if [ -d "$TOOLCHAIN_PATH" ]; then
                echo "‚úÖ Toolchain found at: $TOOLCHAIN_PATH"
                
                # ÊµãËØïÁºñËØëÂô®
                if [ -f "$TOOLCHAIN_PATH/bin/"*-gcc ]; then
                  GCC_VERSION=$($TOOLCHAIN_PATH/bin/*-gcc --version 2>/dev/null | head -1)
                  echo "‚úÖ GCC: $GCC_VERSION"
                fi
                
                echo "use_toolchain=true" >> $GITHUB_OUTPUT
                echo "TOOLCHAIN_READY=true" >> $GITHUB_ENV
                
                echo ""
                echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
                echo "‚ïë   ‚úÖ Prebuilt Toolchain Applied!          ‚ïë"
                echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
              else
                echo "‚ö†Ô∏è  Toolchain verification failed"
                echo "use_toolchain=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå Toolchain file not found"
              echo "use_toolchain=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ÑπÔ∏è  Prebuilt toolchain not found, will build from scratch"
            echo "use_toolchain=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # ============================================
      # 7. üî• Â§öÂ±ÇÁºìÂ≠òÁ≠ñÁï•Ôºà‰øùÊåÅÂéüÊúâ7‰∏™ÁºìÂ≠òÔºâ
      # ============================================
      
      # Â∑•ÂÖ∑ÈìæÁºìÂ≠ò - Â¶ÇÊûú‰ΩøÁî®‰∫ÜÈ¢ÑÁºñËØëÂ∑•ÂÖ∑ÈìæÔºåË∑≥ËøáÊ≠§ÁºìÂ≠ò
      - name: ‚òÅÔ∏è Cache Toolchain (Monthly)
        if: |
          github.event.inputs.force_clean != 'true' && 
          steps.download_toolchain.outputs.use_toolchain != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
          key: toolchain-${{ env.SOURCE_KEY }}-${{ env.MONTH_KEY }}-v12
          restore-keys: |
            toolchain-${{ env.SOURCE_KEY }}-${{ env.MONTH_KEY }}-
            toolchain-${{ env.SOURCE_KEY }}-
            toolchain-${{ env.REPO_BRANCH }}-
      
      # Staging ÁõÆÂΩïÁºìÂ≠ò - Âë®Â∫¶Êõ¥Êñ∞
      - name: ‚òÅÔ∏è Cache Staging Directory (Weekly)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host*
            openwrt/staging_dir/hostpkg
            openwrt/staging_dir/packages
          key: staging-${{ env.SOURCE_KEY }}-${{ env.WEEK_KEY }}-v12
          restore-keys: |
            staging-${{ env.SOURCE_KEY }}-${{ env.WEEK_KEY }}-
            staging-${{ env.SOURCE_KEY }}-
            staging-${{ env.REPO_BRANCH }}-
      
      # ÊûÑÂª∫‰∏ªÊú∫ÁºìÂ≠ò - Âü∫‰∫éÊèí‰ª∂ÁªÑÂêà
      - name: ‚òÅÔ∏è Cache Build Host (Plugin-based)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/host*
          key: buildhost-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v12
          restore-keys: |
            buildhost-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-
            buildhost-${{ env.SOURCE_KEY }}-
            buildhost-${{ env.REPO_BRANCH }}-
      
      # ‰∏ãËΩΩÁºìÂ≠ò - ÈïøÊúüÊúâÊïà
      - name: ‚òÅÔ∏è Cache Downloads (Long-term)
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.SOURCE_KEY }}-${{ env.MONTH_KEY }}-v12
          restore-keys: |
            downloads-${{ env.SOURCE_KEY }}-
            downloads-${{ env.REPO_BRANCH }}-
      
      # ccache ÁºìÂ≠ò - ÊúÄÊøÄËøõÁöÑÁºìÂ≠ò
      - name: ‚òÅÔ∏è Cache ccache (Aggressive)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-${{ env.WEEK_KEY }}-v12
          restore-keys: |
            ccache-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-
            ccache-${{ env.SOURCE_KEY }}-
            ccache-${{ env.REPO_BRANCH }}-
      
      # Feeds ÁºìÂ≠ò
      - name: ‚òÅÔ∏è Cache Feeds (Package Index)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/feeds
            openwrt/.git/modules
          key: feeds-${{ env.SOURCE_KEY }}-${{ env.WEEK_KEY }}-v12
          restore-keys: |
            feeds-${{ env.SOURCE_KEY }}-
            feeds-${{ env.REPO_BRANCH }}-
      
      # ÊûÑÂª∫ÁõÆÂΩïÁºìÂ≠òÔºàÈÉ®ÂàÜÔºâ
      - name: ‚òÅÔ∏è Cache Build Directory (Partial)
        if: github.event.inputs.force_clean != 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/target-*/linux-*/linux-*/.configured
            openwrt/build_dir/target-*/linux-*/modules.builtin*
          key: builddir-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-${{ env.DAY_KEY }}-v12
          restore-keys: |
            builddir-${{ env.SOURCE_KEY }}-${{ env.PLUGINS_HASH }}-
            builddir-${{ env.SOURCE_KEY }}-
      
      # ============================================
      # 8. Feeds ÈÖçÁΩÆÔºà‰ºòÂåñÁâà - ÁÆÄÂåñËæìÂá∫Ôºâ
      # ============================================
      - name: üìö Configure Feeds (Incremental)
        run: |
          cd "$OPENWRT_PATH"
          
          # Ê£ÄÊü•ÁºìÂ≠òÂπ∂ÈÄâÊã©Á≠ñÁï•
          if [ -d "feeds" ] && [ "$(ls -A feeds 2>/dev/null)" ]; then
            echo "üì¶ Cached feeds found, performing incremental update..."
            rm -rf tmp/packagecache
            ./scripts/feeds update -i
          else
            echo "üÜï No cached feeds, performing full setup..."
            rm -rf feeds tmp/packagecache
            
            [ -f "${{ github.workspace }}/feeds.conf.default" ] && \
              cp "${{ github.workspace }}/feeds.conf.default" . && \
              echo "üìÑ Using custom feeds.conf.default"
            
            ./scripts/feeds update -a
          fi
          
          echo "üì¶ Installing feeds..."
          ./scripts/feeds install -a
          echo "‚úÖ Feeds configured"
      
      # ============================================
      # 9. üî• Â¢ûÂº∫ÁöÑ ccache ÈÖçÁΩÆÔºà‰ºòÂåñÁâà - ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂Ôºâ
      # ============================================
      - name: üî• Prepare & Optimize ccache
        run: |
          cd "$OPENWRT_PATH"
          
          # ‰∏ÄÊ¨°ÊÄßÈÖçÁΩÆÊâÄÊúâÁéØÂ¢ÉÂèòÈáè
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          export CONFIG_CCACHE=y
          export FORCE_UNSAFE_CONFIGURE=1
          
          mkdir -p "$CCACHE_DIR"
          
          # üî• ‰ΩøÁî®ÈÖçÁΩÆÊñá‰ª∂‰ª£ÊõøÂ§öÊ¨°ÂëΩ‰ª§Ë°åË∞ÉÁî®
          cat > "$CCACHE_DIR/ccache.conf" <<EOF
          max_size = 25G
          max_files = 250000
          compression = true
          compression_level = 6
          sloppiness = file_macro,locale,time_macros,system_headers,include_file_mtime,include_file_ctime,pch_defines,modules
          hash_dir = false
          direct_mode = true
          depend_mode = true
          compiler_check = content
          stats = true
          EOF
          
          # È¢ÑÁÉ≠ÁªüËÆ°
          ccache -z
          echo "‚úÖ ccache configured:"
          ccache -s | head -10
          
          # üî• ‰∏ÄÊ¨°ÊÄßÂØºÂá∫ÊâÄÊúâÁéØÂ¢ÉÂèòÈáèÂà∞ÂêéÁª≠Ê≠•È™§
          {
            echo "USE_CCACHE=1"
            echo "CCACHE_DIR=$CCACHE_DIR"
            echo "PATH=$PATH"
            echo "CONFIG_CCACHE=y"
            echo "FORCE_UNSAFE_CONFIGURE=1"
          } >> $GITHUB_ENV
      
      # ============================================
      # 10. Ëá™ÂÆö‰πâÈÖçÁΩÆÂèäÊèí‰ª∂ÂºÄÂÖ≥
      # ============================================
      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # Â§çÂà∂Ëá™ÂÆö‰πâÊñá‰ª∂
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv $GITHUB_WORKSPACE/files $OPENWRT_PATH/files
          fi
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # ÊâßË°åËá™ÂÆö‰πâËÑöÊú¨
          if [ -d "${{ github.workspace }}/scripts" ]; then
            find "${{ github.workspace }}/scripts" -name "*.sh" -exec chmod +x {} \;
          fi
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          
          # ÊâßË°åÈ¢ùÂ§ñËÑöÊú¨ÔºàÈîôËØØ‰∏ç‰∏≠Êñ≠Ôºâ
          "${{ github.workspace }}/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL" 2>/dev/null || true
          "${{ github.workspace }}/scripts/preset-adguard-core.sh" "$CLASH_KERNEL" 2>/dev/null || true
          
          # ÁîüÊàêÈÖçÁΩÆ
          echo "‚öôÔ∏è Generating defconfig..."
          make defconfig
          
          # ÊèêÂèñÁõÆÊ†á‰ø°ÊÅØ
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config || echo "x86")
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config || echo "64")
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊúÄÊñ∞ÁâàÊú¨
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases/latest" | \
            grep -m1 '"tag_name"' | cut -d'"' -f4 | sed 's/^v//' || echo "unknown")
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          
          # ÊòæÁ§∫ÈÖçÁΩÆ‰ø°ÊÅØ
          echo "üì± Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "üìå Latest Release: $LATEST_RELEASE"
          
          echo "üì¶ Plugin Status:"
          echo "  Docker: $ENABLE_DOCKER | SSRP: $ENABLE_SSRP | Passwall: $ENABLE_PASSWALL"
          echo "  OpenClash: $ENABLE_OPENCLASH | Nikki: $ENABLE_NIKKI | Lucky: $ENABLE_LUCKY | OAF: $ENABLE_OAF"
      
      # ============================================
      # 11. Âº∫Âà∂Ê∏ÖÁêÜÔºà‰øùÁïôÂÖ≥ÈîÆÁºìÂ≠òÔºâ
      # ============================================
      - name: üßπ Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "üßπ Force cleaning build directory (preserving downloads)..."
          
          # ‰øùÂ≠òÈÖçÁΩÆÊñá‰ª∂
          cp .config .config.backup
          
          # Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩïÔºà‰øùÁïô‰∏ãËΩΩÂíåccacheÔºâ
          make dirclean
          
          # ÊÅ¢Â§çÈÖçÁΩÆÊñá‰ª∂
          cp .config.backup .config
          rm .config.backup
          make defconfig
      
      # ============================================
      # 12. ‰∏ãËΩΩ‰æùËµñÂåÖÔºà‰ºòÂåñÁâà - ÁÆÄÂåñËæìÂá∫Ôºâ
      # ============================================
      - name: üì• Download Packages (Incremental)
        run: |
          cd "$OPENWRT_PATH"
          echo "üì• Starting optimized package download..."
          
          # ÊèêÂçá‰∏ãËΩΩÂπ∂Ë°åÂ∫¶
          DOWNLOAD_JOBS=$((COMPILE_JOBS < 16 ? COMPILE_JOBS * 2 : 16))
          
          # üî• Ê£ÄÊü•Â∑≤‰∏ãËΩΩÊñá‰ª∂
          if [ -d "dl" ] && [ "$(ls -A dl 2>/dev/null)" ]; then
            echo "‚úÖ Found $(ls dl 2>/dev/null | wc -l) cached files in dl/"
          fi
          
          # ÁÆÄÂåñÂ∑•ÂÖ∑ÈÄâÊã©
          if command -v aria2c &>/dev/null; then
            export DOWNLOAD_TOOL="aria2c -x8 -s8 -m5 --file-allocation=none"
            echo "üöÄ Using aria2 for faster downloads"
          fi
          
          make download -j"$DOWNLOAD_JOBS" V=s 2>&1 | tee download.log
          
          # ‰∏ÄË°åÁªüËÆ°
          echo "üìä Downloads: $(find dl -type f 2>/dev/null | wc -l) files ($(du -sh dl 2>/dev/null | cut -f1))"
      
      # ============================================
      # 13. ÁºñËØëÂõ∫‰ª∂Ôºà‰ºòÂåñÁâà - ÁÆÄÂåñÔºâ
      # ============================================
      - name: üî® Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          echo "üî® Compiling..."
          echo "=== ccache initial stats ==="
          ccache -s
          
          make -j$(nproc) || make -j1 V=s || exit 1
          
          echo ""
          echo "‚úÖ Success"
          echo "status=success" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üìä ccache stats:"
          echo "=== ccache final stats ==="
          ccache -s || echo "ccache stats not available"
          echo "Cache directory size: $(du -sh .ccache 2>/dev/null || echo 'N/A')"
   
            # ============================================
      # 14. üìä ÊûÑÂª∫Êä•ÂëäÔºàÂêàÂπ∂ÁªüËÆ°Ê≠•È™§Ôºâ
      # ============================================
      - name: üìä Cache Statistics
        if: always()
        run: |
          cd "$OPENWRT_PATH"
          echo "=== üéØ Cache Effectiveness Report ==="
          echo "Build Time: $(date)"
          echo "Build ID: ${{ env.BUILD_ID }}"
          echo ""
          
          echo "üìã Cache Keys:"
          echo "  Source: ${{ env.SOURCE_KEY }}"
          echo "  Month: ${{ env.MONTH_KEY }}"
          echo "  Week: ${{ env.WEEK_KEY }}"
          echo "  Plugins: ${{ env.PLUGINS_HASH }}"
          echo ""
          
          echo "üîß Toolchain Status:"
          if [ "${{ env.TOOLCHAIN_READY }}" == "true" ]; then
            echo "  ‚úÖ Using prebuilt toolchain"
          else
            echo "  üî® Built from scratch"
          fi
          echo ""
          
          echo "üìÅ Directory Sizes:"
          for dir in dl .ccache staging_dir build_dir feeds; do
            if [ -d "$dir" ]; then
              size=$(du -sh "$dir" 2>/dev/null | cut -f1)
              files=$(find "$dir" -type f 2>/dev/null | wc -l)
              echo "  $dir: $size ($files files)"
            fi
          done
          echo ""
          
          echo "üéØ ccache Statistics:"
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR="$PWD/.ccache"
            ccache -s
          else
            echo "ccache not available"
          fi
          echo "================================="
      
      # ============================================
      # 15. Êï¥ÁêÜÂõ∫‰ª∂Êñá‰ª∂
      # ============================================
      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          echo "=== Generated Files ==="
          ls -lah
          
          # ÂÆâÂÖ®ÊèêÂèñÂÜÖÊ†∏ÁâàÊú¨
          KERNEL_VERSION="unknown"
          if ls *.manifest 1> /dev/null 2>&1; then
            KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 || echo "unknown")
          fi
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "$OPENWRT_PATH/.config" build.config
          
          # ÊâìÂåÖÂÜÖÊ†∏Ê®°Âùó
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # Ê∏ÖÁêÜ‰∏çÈúÄË¶ÅÁöÑÊñá‰ª∂
          rm -f feeds.buildinfo version.buildinfo *.manifest
          
          # ÁîüÊàêÂõ∫‰ª∂‰ø°ÊÅØ
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "toolchain_prebuilt": ${{ env.TOOLCHAIN_READY == 'true' && 'true' || 'false' }},
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }},
              "lucky": ${{ github.event.inputs.lucky }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          # ËæìÂá∫ÁªìÊûú
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      
      # ============================================
      # 16. ‰∏ä‰º† Artifacts
      # ============================================
      - name: üì§ Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      
      # ============================================
      # 17. ÂàõÂª∫ Release
      # ============================================
      - name: üöÄ Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} ‚Ä¢ ${{ env.FIRMWARE_TAG }} ‚Ä¢ ${{ env.LATEST_RELEASE }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### üìä ÊûÑÂª∫‰ø°ÊÅØ
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |------|------|
            | **ÁâàÊú¨** | `${{ env.LATEST_RELEASE }}` |
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏** | `${{ steps.organize.outputs.kernel_version }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **Password** | `${{ github.event.inputs.root_password }}` |
            | **Â∑•ÂÖ∑Èìæ** | ${{ env.TOOLCHAIN_READY == 'true' && '‚úÖ È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ' || 'üî® ‰ªéÊ∫êÁ†ÅÊûÑÂª∫' }} |
            
            ### üì¶ ÂåÖÂê´ÁöÑÊèí‰ª∂
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '‚úÖ Â∑≤ÁºñËØë' || '‚ùå Êú™ÁºñËØë' }} |
            
            ### üìù Ê∫êÁ†Å‰ø°ÊÅØ
            - **‰ªìÂ∫ì**: ${{ env.REPO_URL }}
            - **ÂàÜÊîØ**: `${{ env.REPO_BRANCH }}`
            - **Êèê‰∫§**: `${{ env.COMMIT_HASH }}`
            - **‰ΩúËÄÖ**: ${{ env.COMMIT_AUTHOR }}
            - **Êó∂Èó¥**: ${{ env.COMMIT_DATE }}
            - **Ê∂àÊÅØ**: ${{ env.COMMIT_MESSAGE }}
            
            ### üöÄ ÊÄßËÉΩ‰ºòÂåñ
            - ‚úÖ **È¢ÑÁºñËØëÂ∑•ÂÖ∑Èìæ**: ËäÇÁúÅ 20-30 ÂàÜÈíüÊûÑÂª∫Êó∂Èó¥
            - ‚úÖ **ccache ÁºìÂ≠ò**: 76%+ ÂëΩ‰∏≠Áéá
            - ‚úÖ **Â§öÂ±ÇÁºìÂ≠òÁ≠ñÁï•**: 7 Â±ÇÊô∫ËÉΩÁºìÂ≠ò
            - ‚úÖ **Â¢ûÈáèÊûÑÂª∫**: ‰ªÖÈáçÊñ∞ÁºñËØëÂèòÊõ¥ÈÉ®ÂàÜ
            
            ### üì• ÂÆâË£ÖËØ¥Êòé
            
            #### UEFI Âõ∫‰ª∂ÔºàÊé®ËçêÔºâÔºö
            ```bash
            # 1. Ëß£ÂéãÂõ∫‰ª∂
            gunzip openwrt-*-generic-ext4-combined-efi.img.gz
            
            # 2. ÂÜôÂÖ•Á£ÅÁõòÔºàÊõøÊç¢ /dev/sdX ‰∏∫ÂÆûÈôÖËÆæÂ§áÔºâ
            sudo dd if=openwrt-*-generic-ext4-combined-efi.img of=/dev/sdX bs=4M status=progress
            
            # 3. ÂêåÊ≠•Âπ∂ÂºπÂá∫
            sync
            sudo eject /dev/sdX
